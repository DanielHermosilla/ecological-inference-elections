// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// EMAlgorithmAll
Rcpp::List EMAlgorithmAll(Rcpp::String em_method, Rcpp::String probability_method, Rcpp::IntegerVector maximum_iterations, Rcpp::NumericVector stopping_threshold, Rcpp::LogicalVector verbose);
RcppExport SEXP _infPackage_EMAlgorithmAll(SEXP em_methodSEXP, SEXP probability_methodSEXP, SEXP maximum_iterationsSEXP, SEXP stopping_thresholdSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type em_method(em_methodSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type probability_method(probability_methodSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type maximum_iterations(maximum_iterationsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stopping_threshold(stopping_thresholdSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(EMAlgorithmAll(em_method, probability_method, maximum_iterations, stopping_threshold, verbose));
    return rcpp_result_gen;
END_RCPP
}
// EMAlgorithmCDF
Rcpp::List EMAlgorithmCDF(Rcpp::String probability_method, Rcpp::IntegerVector maximum_iterations, Rcpp::NumericVector stopping_threshold, Rcpp::LogicalVector verbose, Rcpp::String multivariate_method, Rcpp::NumericVector multivariate_epsilon, Rcpp::IntegerVector multivariate_iterations);
RcppExport SEXP _infPackage_EMAlgorithmCDF(SEXP probability_methodSEXP, SEXP maximum_iterationsSEXP, SEXP stopping_thresholdSEXP, SEXP verboseSEXP, SEXP multivariate_methodSEXP, SEXP multivariate_epsilonSEXP, SEXP multivariate_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type probability_method(probability_methodSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type maximum_iterations(maximum_iterationsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stopping_threshold(stopping_thresholdSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type multivariate_method(multivariate_methodSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type multivariate_epsilon(multivariate_epsilonSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type multivariate_iterations(multivariate_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(EMAlgorithmCDF(probability_method, maximum_iterations, stopping_threshold, verbose, multivariate_method, multivariate_epsilon, multivariate_iterations));
    return rcpp_result_gen;
END_RCPP
}
// EMAlgorithmHitAndRun
Rcpp::List EMAlgorithmHitAndRun(Rcpp::String probability_method, Rcpp::IntegerVector maximum_iterations, Rcpp::NumericVector stopping_threshold, Rcpp::LogicalVector verbose, Rcpp::IntegerVector step_size, Rcpp::IntegerVector samples);
RcppExport SEXP _infPackage_EMAlgorithmHitAndRun(SEXP probability_methodSEXP, SEXP maximum_iterationsSEXP, SEXP stopping_thresholdSEXP, SEXP verboseSEXP, SEXP step_sizeSEXP, SEXP samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type probability_method(probability_methodSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type maximum_iterations(maximum_iterationsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stopping_threshold(stopping_thresholdSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type samples(samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(EMAlgorithmHitAndRun(probability_method, maximum_iterations, stopping_threshold, verbose, step_size, samples));
    return rcpp_result_gen;
END_RCPP
}
// RprecomputeHR
void RprecomputeHR(Rcpp::IntegerVector samples, Rcpp::IntegerVector step_size);
RcppExport SEXP _infPackage_RprecomputeHR(SEXP samplesSEXP, SEXP step_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type step_size(step_sizeSEXP);
    RprecomputeHR(samples, step_size);
    return R_NilValue;
END_RCPP
}
// RprecomputeExact
void RprecomputeExact();
RcppExport SEXP _infPackage_RprecomputeExact() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    RprecomputeExact();
    return R_NilValue;
END_RCPP
}
// RsetParameters
void RsetParameters(Rcpp::NumericMatrix candidate_matrix, Rcpp::NumericMatrix group_matrix);
RcppExport SEXP _infPackage_RsetParameters(SEXP candidate_matrixSEXP, SEXP group_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type candidate_matrix(candidate_matrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type group_matrix(group_matrixSEXP);
    RsetParameters(candidate_matrix, group_matrix);
    return R_NilValue;
END_RCPP
}
// readFromFile
void readFromFile(Rcpp::String filename);
RcppExport SEXP _infPackage_readFromFile(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type filename(filenameSEXP);
    readFromFile(filename);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_infPackage_EMAlgorithmAll", (DL_FUNC) &_infPackage_EMAlgorithmAll, 5},
    {"_infPackage_EMAlgorithmCDF", (DL_FUNC) &_infPackage_EMAlgorithmCDF, 7},
    {"_infPackage_EMAlgorithmHitAndRun", (DL_FUNC) &_infPackage_EMAlgorithmHitAndRun, 6},
    {"_infPackage_RprecomputeHR", (DL_FUNC) &_infPackage_RprecomputeHR, 2},
    {"_infPackage_RprecomputeExact", (DL_FUNC) &_infPackage_RprecomputeExact, 0},
    {"_infPackage_RsetParameters", (DL_FUNC) &_infPackage_RsetParameters, 2},
    {"_infPackage_readFromFile", (DL_FUNC) &_infPackage_readFromFile, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_infPackage(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
