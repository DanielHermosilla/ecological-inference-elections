% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eim-package.R
\name{predict.eim}
\alias{predict.eim}
\title{Predict the R x C probability using an EM Model}
\usage{
\method{predict}{eim}(object, ...)
}
\arguments{
\item{object}{An eim object}

\item{...}{Additional arguments required by specific methods:
  \itemize{
        \item \var{main_method} (character) The method for estimating the Expectation-Maximization (EM) algorithm. Options:
            "Multinomial", "MVN CDF", "MVN PDF", "Hit and Run" and "Exact" (default: "Multinomial"). \cr

        \item \var{probability_method} (character) The method for obtaining the initial probability. Options:
            "Group proportional", "Proportional", "Uniform". (default: "Group proportional"). \cr

        \item \var{iterations} (integer(1)) The maximum amount of iterations to perform on the EM algorithm. (default: 1000). \cr

        \item \var{stopping_threshold} (numeric(1)) The minimum difference between consequent probabilities for stopping the
         iterations (default: 0.001). \cr

        \item \var{verbose} (boolean(1)) Boolean indicating whether to print useful messages while iterating. (default: FALSE). \cr

    \item \strong{"Hit and Run" Method:}
      \itemize{
        \item \verb{step_size} (integer(1)): The step size (M) for the Hit and Run algorithm. \cr
        \item \verb{samples} (integer(1)): The number of samples (S) to generate. \cr
      }
    \item \strong{"MVN CDF" Method:}
      \itemize{
        \item \verb{multivariate_method} (character): The integration method. Default is "Genz2". \cr
        \item \verb{multivariate_error} (numeric(1)): The integration error threshold. Default is 1e-6. \cr
        \item \verb{multivariate_iterations} (integer(1)): The number of Monte Carlo iterations. Default is 5000. \cr
      }
  }}
}
\value{
(matrix) A matrix of estimated probabilities.
}
\description{
This method is a wrapper around compute(), allowing prediction of probabilities
based on specified parameters. The results are stored in object$probability. Refer
to object$compute method for more information about its function and parameters. However
it will essentially trigger the EM algorithm.
}
\details{
Given the parameters of an Expected Maximization, computes and updates the results of the
input algorithm.
}
\examples{
# Example 1: Predict the Hit and Run method
model <- eim$new(X = matrix(1:9, 3, 3), W = matrix(1:9, 3, 3))
predict(model, "Hit and Run", 
				step_size = 1000, 
				samples = 5000) 
Returns the matrix of probabilities
nrow(model) # 3

# Example 2:  Predict the Exact method
predict(model, "Exact")

}
