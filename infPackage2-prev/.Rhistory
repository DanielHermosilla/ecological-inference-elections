end
end()
}
frec_setosa = table(iris$Sepal.Length)
frec_setosa = table(iris$Species)
iris
iris
help(iris)
iris
iris
x = c(1, 2, 5, 10)
x[5]
x[4]
x(5)
max(x)
range(x)
iris[iris$Sepal.Length < 2]
iris[iris$Sepal.Length < 2,]
iris[iris$Sepal.Length < 2, ]
iris[iris$Species == virginica, ]
iris[iris$Species == 6, ]
iris[iris$Species >= 6, ]
iris[iris$Species > 6, ]
iris[iris$Species > 6, ]
iris
frec_setosa = table(iris$Species)
frec_setosa
frec_setosa = table(iris$Sepal.Length[1:50])
frec_setosa
frec_setosa = table(iris$Sepal.Length[1:50], iris$Sepal.Width[1:50])
frec_setosa
frec_setosa = table(iris$Sepal.Length[1:50]) & table(iris$Sepal.Width[1:50])
for ()
for ($setosa in iris) {
table(iris)
}
for (setosa in iris) {
table(iris$Sepal.Length)
}
for (variable in vector) {
}
frec_setosa = table(iris$Sepal.Length[1:50])
frec_setosa
iris
frec_setosa = table(iris$Sepal.Length[1:50])
frec_setosa
frec_setosa = table(iris$Sepal.Length[1:50], iris$Sepal.Width[1:50])
frec_setosa
frec_setosa = table(iris$Sepal.Length[1:50], iris$Sepal.Width[1:50], iris$Petal.Length[1:50])
frec_setosa
for n 1:50
for (n in n=1:50) {
}
n = 1:50
for(n in n) {}
for (n in n) {
table(iris[])
end
}
iris
n = 2:5
for (n in n) {
table(iris[n:50])
}
for (i in 1:10) {
print(i+1)
}
for (i in 2:5) {
table(iris[i:50])
}
for (i in 2:5) {
table(iris[50:i])
}
for (i in 2:5) {
table(iris[i,2:50])
}
for (i in 2:5) {
}
for (i in 2:5) {
table(iris[i,1:50])
}
iris[2,3]
iris[1,1]
for (i in 1:4) {
table(iris[i,1:50])
}
table(iris[1,1:50])
table(iris[2])
table(iris[2,50])
table(iris[2,1:50])
setosa = iris[1:4,1:50]
iris[4,50]
iris[4,1]
for (i in 1:4) {
table(iris[1:50,i])
}
for (i in 1:4) {
frec_setosa = table(iris[1:50,i])
}
frec_setosa
a = table(iris[1:50,1])
a
for (i in 1:$) {
for (i in 1:4) {
frec_setosa (i,1) = table(iris[1:50,i])
}
for (i in 1:4) {
}
for (i in 1:4) {
frecuencia_setosa (i) = table(iris[1:50,i])
}
for (i in 1:4) {
frecuencia_setosa (1:50, i) = table(iris[1:50,i])
}
for (i in 1:4) {
frecuencia_setosa = table(iris[1:50,i])
}
frecuencia_setosa
frecuencia_setosa[1,1]
frecuencia_setosa[2,1]
frecuencia_setosa[1,5]
frecuencia_setosa(5)
frecuencia_setosa[5]
frecuencia_setosa[6]
frecuencia_setosa[1]
for (i in 1:4) {
frecuencia_setosa[i,1:20] = table(iris[1:50,i])
}
frecuencia_setosa[1]
for (i in 1:4) {
frecuencia_setosa[1:4,i] = table(iris[1:50,i])
}
for (i in 1:4) {
frecuencia_setosa[i,] = table(iris[1:50,i])
}
iris[1:50,1]
table(iris[1:50,1])
table(iris[1:50,2])
table(iris[1:50,3])
table(iris[1:50,4])
table(iris[1:50,5])
for (i in 1:4) {
table(iris[1:50,i])
}
table(Sepal.Length = iris$Sepal.Length)
tablaSepalLength <- as.data.frame(table(SepalLength = iris$Sepal.Length))
tablaSepalLength
tablaSepalLength <- as.data.frame(table(SepalLength en = iris$Sepal.Length[1:5'']))
tablaSepalLength <- as.data.frame(table(SepalLength en  = iris$Sepal.Length[1:50]))
tablaSepalLength <- as.data.frame(table(SepalLength  = iris$Sepal.Length[1:50]))
tablaSepalLength
View(tablaSepalLength)
for (i in 1:4) {
tablaSepalLength <- as.data.frame(table(iris[1:50,i]))
}
for (i in 1:4) {
tablaSepalLength[i] <- as.data.frame(table(iris[1:50,i]))
}
for (i in 1:4) {
tablaSetosa = as.data.frame(table(iris[1:50,i]))
}
View(tablaSetosa)
nrow(iris)
for (i in 1:4) {
for (i in 1:4) {
tablaSetosa = as.data.frame(table(iris[1:50,i]))
}
view(tablaSetosa)
View(tablaSetosa)
View(tablaSetosa)
View(tablaSetosa)
View(tablaSetosa)
View(tablaSetosa)
View(tablaSetosa)
View(tablaSetosa)
View(tablaSetosa)
for (i in 1:4) {
frecuencia_setosa = table(iris[1:50,i])
}
frecuencia_setosa
frecuencia_setosa
View(tablaSetosa)
for (i in 1:4) {
tablaSetosa = as.data.frame(table(iris[1:50,i]))
}
View(tablaSetosa)
for (i in 1:4) {
tablaSetosa[i,] = as.data.frame(table(iris[1:50,i]))
}
for (i in 1:4) {
tablaSetosa[i,] = (table(iris[1:50,i]))
}
for (i in 1:4) {
tablaSetosa = as.data.frame(table(iris[1:50,i]))
}
View(tablaSetosa)
help(iris)
iris
table(iris[1:50])
table(iris[1:50,2])
for (i in 1:4) {
tablaSetosa = as.data.frame(table(iris[1:50,i]))
}
tablaSetosa
for (i in 1:4) {
}
for (i in 1:4) {
}
tablaSetosa <- vector()
for (i in 1:4){}
for  (i in 1:4) {
tablaSetosa[i] <- as.data.frame(table(iris[1:50,i]))
}
View(tablaSetosa)
for  (i in 1:4) {
tablaSetosa[i] <- printas.data.frame(table(iris[1:50,i]))
view(tablaSetos)
}
for  (i in 1:4) {
tablaSetosa[i] <- as.data.frame(table(iris[1:50,i]))
View(s)
}
for  (i in 1:4) {
tablaSetosa <- as.data.frame(table(iris[1:50,i]))
View(tablaSetosa)
}
for  (i in 1:4) {
tablaSetosa = (table(iris[1:50,i]))
print(tablaSetosa)
}
table(iris[1:50,1])
for  (i in 1:4) {
View(as.data.frame(table(iris[1:50,i])))
}
for  (i in 1:4) {
View(as.data.frame(table(iris[1:50,i])))
}
for (i in 1:4) {
for (j in 0:2) {
View(as.data.frame(table(iris[1+j*50:50+j*50,i])))
} }
for (i in 1:4) {
for (j in 1:3) {
View(as.data.frame(table(iris[(j-1)*50:(j-1)*50,i])))
} }
for (i in 1:4) {
for (j in 0:2) {
View(as.data.frame(table(iris[(1+j*50):(50+j*50),i])))
}}
for (i in 1:4) {
print(table(iris[1:50,i]))
}
for (i in 1:4) {
for (j in 0:2) {
print(table(iris[((50*j)+1):(50*(j+1)),i]))
}}
> for (i in 1:4) {
+ for (j in 0:2) {
+ print(table(iris[((50*j)+1):(50*(j+1)),i]))
+ }}
for (i in 1:4) {+ for (j in 0:2) {
+ print(table(iris[((50*j)+1):(50*(j+1)),i]))
+ }}
for (i in 1:4) {
+ for (j in 0:2) {
+ print(table(iris[((50*j)+1):(50*(j+1)),i]))
+ }}
for (i in 1:4) {
+ for (j in 0:2) {
+ print(table(iris[((50*j)+1):(50*(j+1)),i]))
+ }}
for (i in 1:4) {
for (j in 0:2) {
h = hola
print(h)
print(table(iris[((50*j)+1):(50*(j+1)),i]))
}}
for (i in 1:4) {
for (j in 0:2) {
print("hola")
print(table(iris[((50*j)+1):(50*(j+1)),i]))
}}
print(iris[1,1])
print(iris[0,1])
print(label(iris))
label(iris)
Columna = c("Sepal Length", "Sepal Width", "Petal Length", "Petal Width")
Columna[1]
iris
Especie = c("Setosa", "Versicolor", "Virginica")
for (i in 1:4) {
for (j in 0:2) {
print(Especie[1,(j+1)])
print(Columna[1,i])
print(table(iris[((50*j)+1):(50*(j+1)),i]))
}}
Especie[1,1]
for (i in 1:4) {
for (j in 0:2) {
print(Especie[(j+1)])
print(Columna[i])
print(table(iris[((50*j)+1):(50*(j+1)),i]))
}}
table(iris[1:50,3])
print(Columna[1], Especie[1])
print(Columna[1] & Especie[1])
print("hola" Columna[1])
print("Columna[1]") print("Especie[1]")
print("Columna[1]")
print(Columna[1])
print(Columna[1] $ Especie[1])
Columna
cat(Columna[1])
for (i in 1:4) {
for (j in 0:2) {
print(Columna[1])
}}
for (i in 1:4) {
for (j in 0:2) {
cut(Especie[(j+1)])
cut(Columna[i])
print(table(iris[((50*j)+1):(50*(j+1)),i]))
}}
especie[1]
cut(Especie[1])
Especie[1]
(as.data.frame(table(iris[1:50,1])
View(as.data.frame(table(iris[1:50,1])
as.data.frame(table(iris[1:50,1]))
print(as.data.frame(table(iris[1:50,1])))
for (i in 1:4) {
for (j in 0:2) {
print(Especie[(j+1)])
print(Columna[i])
print(as.data.frame(table(iris[((50*j)+1):(50*(j+1)),i])))
}}
Columna = c("Sepal Length", "Sepal Width", "Petal Length", "Petal Width")
Columna
for (j in 0:2) {
for (i in 1:4) {
print(Especie[(j+1)])
print(Columna[i])
print(as.data.frame(table(iris[((50*j)+1):(50*(j+1)),i])))
}}
print(as.data.frame(table(iris[1:50,1])))
print(as.data.frame(table(iris[1:50,1])),row.names = Largo)
print(as.data.frame(table(iris[1:50,1])),row.names = "Largo")
print(as.data.frame(table(iris[1:50,1])), row.names = "1")
print(as.data.frame(table(iris[1:50,1])), row.names = )
print(as.data.frame(table(iris[1:50,1])), row.names = a)
print(as.data.frame(table(iris[1:50,1])), row.names = "a","b")
print(as.data.frame(table(iris[1:50,1])), row.names.data.frame("a"))
print(as.data.frame(table(iris[1:50,1])), row.names("a","b")
"a"
print(row.names(as.data.frame(table(iris[1:50,1]))))
tablafrec <- as.data.frame(table(iris[1:50.1]))
tablafrec <- as.data.frame(table(iris[1:50,1]))
tablafrec
transform(tablafrec,
FreqAc = cumsum(Freq),
Rel = round(prop.table(Freq), 3),
RelAc = round(cumsum(prop.table(Freq)), 3))
transform(tablafrec,
Rel = round(prop.table(Freq), 3))
transform(tablafrec,
Rel = round(prop.table(Freq), 3)
)
for (j in 0:2) {
for (i in 1:4) {
print(Especie[(j+1)])
print(Columna[i])
tablafrec <- as.data.frame(table(iris[((50*j)+1):(50*(j+1)),i]))
transform(tablafrec,
Rel = round(prop.table(Freq), 3))
tablafrec
}}
tablafrec
for (j in 0:2) {
for (i in 1:4) {
print(Especie[(j+1)])
print(Columna[i])
tablafrec <- as.data.frame(table(iris[((50*j)+1):(50*(j+1)),i]))
transform(tablafrec,
Rel = round(prop.table(Freq), 3))
print(tablafrec)
}}
tablafrec
transform(tablafrec,
Rel = round(prop.table(Freq), 3))
for (j in 0:2) {
for (i in 1:4) {
print(Especie[(j+1)])
print(Columna[i])
tablafrec <- as.data.frame(table(iris[((50*j)+1):(50*(j+1)),i]))
print(transform(tablafrec,)
Rel = round(prop.table(Freq), 3))
}}
for (j in 0:2) {
for (i in 1:4) {
print(Especie[(j+1)])
print(Columna[i])
tablafrec <- as.data.frame(table(iris[((50*j)+1):(50*(j+1)),i]))
print((transform(tablafrec,
Rel = round.(prop.table(Freq),3)))
}}
for (j in 0:2) {
for (i in 1:4) {
print(Especie[(j+1)])
print(Columna[i])
tablafrec <- as.data.frame(table(iris[((50*j)+1):(50*(j+1)),i]))
print(transform(tablafrec,
Rel = round(prop.table(Freq),3)))
}}
print("ola")
print("ola")
print("ola")
# Ejercicio 1
#Inciso A
pauta = c(4, 2, 5, 1, 4, 3, 2, 5, 1, 3, 2)
#Ejercicio 2
#Inciso A
Columna = c("Sepal Length", "Sepal Width", "Petal Length", "Petal Width")
Especie = c("Setosa", "Versicolor", "Virginica")
for (j in 0:2) {
for (i in 1:4) {
print(Especie[(j+1)])
print(Columna[i])
tablafrec <- as.data.frame(table(iris[((50*j)+1):(50*(j+1)),i]))
print(transform(tablafrec,
Rel = round(prop.table(Freq),3)))
}}
#Ejercicio 2
#Inciso A
Columna = c("Sepal Length", "Sepal Width", "Petal Length", "Petal Width")
Especie = c("Setosa", "Versicolor", "Virginica")
for (j in 0:2) {
for (i in 1:4) {
print(Especie[(j+1)])
print(Columna[i])
tablafrec <- as.data.frame(table(iris[((50*j)+1):(50*(j+1)),i]))
print(transform(tablafrec,
Rel = round(prop.table(Freq),3)))
}}
#Frecuencia de las especies, esto es lo que se pide en la instrucciÃ³n
print("Tabla de especies")
frec_especies = as.data.frame(table(iris$Species))
print(transform(frec_especies,
Rel = round(prop.table(Freq),3)))
#Inciso B
aggregate(iris[,3], list(iris$Species), mean)
#Inciso C
plot(table(iris$Sepal.Length),main="DistribuciÃ³n de frecuencias del largo del sÃ©palo", sub = " ô°â Actividad 2", xlab = "Largo del sÃ©palo", ylab = "Frecuencia")
#Inciso D
plot(iris$Sepal.Length, iris$Sepal.Width, main = "Largo del sÃ©palo vs ancho del sÃ©palo", sub = "Actividad 2", xlab = "Largo del sÃ©palo", ylab = "Ancho del sÃ©palo")
plot(iris$Petal.Length, iris$Petal.Width, main = "Largo del pÃ©talo vs ancho del pÃ©talo", sub = "Actividad 2", xlab = "Largo del pÃ©talo", ylab = "Ancho del pÃ©talo")
#Inciso E
#CorrelaciÃ³n del sÃ©palo
cor(iris$Sepal.Length,iris$Sepal.Width)
#CorrelaciÃ³n del pÃ©talo
cor(iris$Petal.Length,iris$Petal.Width)
echo "ola"
print("hola")
print("hola")
library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess")
install.packages("knitr")
install.packages("knitr")
install.packages("rmarkdown")
lintr:::addin_lint()
library(infPackage2)
setwd("infPackage2/")
source("tests/testthat/utils_instances.R")
result <- random_samples(
c(5, 20), # Ballots range
c(2, 5), # Candidates range
c(2, 5), # Demographic group range
c(20, 100) # Votes per ballot range
)
# From the test before, we can assume the constructing function work
model <- eim$new(result$X, result$W)
model
model$compute()
devtools::load_all()
model$compute()
a <- eim$new("/Users/daniel/ecological-inference-elections/anRpackage/data/J100_M50_G2_I2_L50_seed1.json")
a <- eim$new("/Users/daniel/ecological-inference-elections/anRpackage/data/J100_M50_G2_I2_L50_seed1.json")
a <- eim$new("/Users/daniel/ecological-inference-elections/anRpackage/data/J100_M50_G2_I2_L50_seed1.json")
devtools::load_all()
a <- eim$new("/Users/daniel/ecological-inference-elections/anRpackage/data/J100_M50_G2_I2_L50_seed1.json")
a <- eim$new("/Users/daniel/ecological-inference-elections/anRpackage/data/J100_M50_G2_I2_L50_seed1.json")
a <- eim$new(json_path = "/Users/daniel/ecological-inference-elections/anRpackage/data/J100_M50_G2_I2_L50_seed1.json")
a
a$compute()
a$compute(main_method = "Exact")
a$compute(main_method = "Hit and Run", step = 3000, sample = 1000)
a$compute(main_method = "Hit and Run", step_size = 3000, sample = 1000)
a$compute(main_method = "Hit and Run", step_size = 3000, samples = 1000)
a$compute(main_method = "Hit and Run", step_size = as.integer(3000), samples = as.integer(1000))
a$compute(main_method = "MVN CDF")
a$compute(main_method = "MVN PDF")
a$compute(main_method = "Exact")
a
summary(a)
a$compute()
a$logLikelihood
devtools::load_all()
a$compute()
a
a$logLikelihood
q()
