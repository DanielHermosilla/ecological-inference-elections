% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eim-class.R
\name{eim}
\alias{eim}
\title{S3 Object for the Expectation-Maximization Algorithm}
\usage{
eim(X = NULL, W = NULL, json_path = NULL)
}
\arguments{
\item{X}{A \verb{(b x c)} matrix of candidate votes per ballot box.
This is optional if a valid \code{json_path} is provided.}

\item{W}{A \verb{(b x g)} matrix of group votes per ballot box.
This is optional if a valid \code{json_path} is provided.}

\item{json_path}{A character string specifying the path to a JSON file that
contains the \code{"X"} and \code{"W"} matrices. If both \code{X} and \code{W}
are not supplied, they will be read from this file.}
}
\value{
A list of class \code{"eim"} containing:
\describe{
\item{\code{X}}{The candidate votes matrix \eqn{(b \times c)}.}
\item{\code{W}}{The group votes matrix \eqn{(b \times g)}.}
}
}
\description{
This constructor creates an \code{"eim"} S3 object, either by using matrices
\code{X} and \code{W} directly or by reading them from a JSON file. Each
\code{eim} object encapsulates the data (votes for candidates and demographic
groups) required by the underlying Expectation-Maximization algorithm.
}
\details{
If \code{X} and \code{W} are directly supplied, they must match the correct
dimensions of ballot boxes (b). Alternatively, if \code{json_path} is provided, the function expects
the JSON file to contain elements named \code{"X"} and \code{"W"} under the
top-level object.

Internally, this function also initializes the corresponding instance within
the low-level (C-based) API, ensuring the data is correctly registered for
further processing by the EM algorithm.
}
\note{
For an alternative way to generate \code{X} and \code{W}, you can use the
\link{simulate_elections} function, which provides several parameters
(such as \code{group_proportions}, \code{candidate_proportions}, and
\code{probability}) for controlling the underlying distributions of votes.
Afterwards, you may pass the resulting matrices to \code{eim()}.
}
\section{Methods}{

In addition to this constructor, the \code{"eim"} class provides several
S3 methods for common operations. Some of these methods are fully documented,
while others are ommited due to its straightfoward implementantion. The available methods are:
\itemize{
\item \link{compute} -- Runs the Expected-Maximization algorithm.
\item \link{sd} -- Estimates the standard deviation of probabilities
\item \link{save} -- Save the results to a specified file.
\item \code{var} -- Estimates the variance of probabilities.
\item \code{print} -- Print useful information about the object.
\item \code{summary} -- Shows, in form of a list, the most important attributes.
\item \code{as.matrix} -- Returns the probability matrix.
\item \code{write.csv} -- Writes the probability matrix in a \code{.csv} file.
\item \code{dput} -- Writes the object in a \code{.rda} file.
\item \code{logLik} -- Returns the log-likelihood from the last iteration.
}
}

\examples{
# Example 1: Create an eim object from existing matrices
X_mat <- matrix(1:9, nrow = 3, ncol = 3)
W_mat <- matrix(1:9, nrow = 3, ncol = 3)
model <- eim(X = X_mat, W = W_mat)

# Example 2: Create an eim object from a JSON file
\dontrun{
model2 <- eim(json_path = "path/to/file.json")
}

# Example 3: Use simulate_elections with optional parameters, then create an eim object
\dontrun{
# Simulate data for 2 ballot boxes, 3 candidates, 2 groups,
# and custom group/candidate proportions
sim_result <- simulate_elections(
    num_ballots = 2,
    num_candidates = 3,
    num_groups = 2,
    group_proportions = c(0.4, 0.6),
    candidate_proportions = c(0.2, 0.3, 0.5)
)

# Construct an eim object with the simulated data
model3 <- eim(X = sim_result$X, W = sim_result$W)
}

}
