% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eim-class.R
\name{eim}
\title{S3 Object for the Expectation-Maximization Algorithm}
\usage{
eim(X = NULL, W = NULL, json_path = NULL, mismatch = FALSE)
}
\arguments{
\item{X}{A \verb{(b x c)} matrix representing candidate votes per ballot box.}

\item{W}{A \verb{(b x g)} matrix representing group votes per ballot box.}

\item{json_path}{A path to a JSON file containing \code{X} and \code{W} fields, stored as nested arrays.}

\item{mismatch}{Boolean to allow a mismatch between group and candidate votes. By default it is \code{FALSE}.}
}
\value{
A list of class \code{eim} containing:
\describe{
\item{\code{X}}{The candidate votes matrix \code{(b x c)}.}
\item{\code{W}}{The group votes matrix \code{(b x g)}.}
}
}
\description{
This constructor creates an \code{eim} S3 object, either by using matrices
\code{X} and \code{W} directly or by reading them from a JSON file. Each
\code{eim} object encapsulates the data (votes for candidates and demographic
groups) required by the underlying Expectation-Maximization algorithm.
}
\details{
If \code{X} and \code{W} are directly supplied, they must match the correct
dimensions of ballot boxes (b). Alternatively, if \code{json_path} is provided, the function expects
the JSON file to contain elements named \code{"X"} and \code{"W"} under the
top-level object. This two approaches are \strong{mutually exclusable}, yielding an error otherwise.

Internally, this function also initializes the corresponding instance within
the low-level (C-based) API, ensuring the data is correctly registered for
further processing by the EM algorithm.
}
\note{
For an alternative way to generate \code{X} and \code{W}, you can use the
\link{simulate_election} function, which provides several parameters
(such as \code{group_proportions}, \code{lambda}, and
\code{probability}) for controlling the underlying distributions of votes.
Afterwards, you may pass the resulting matrices to \code{eim()}.
}
\section{Methods}{

In addition to this constructor, the "eim" class provides several
S3 methods for common operations. Some of these methods are fully documented,
while others are ommited due to its straightfoward implementantion. The available methods are:
\itemize{
\item \link{compute} -- Runs the EM algorithm.
\item \link{bootstrap} -- Estimates the standard deviation of probabilities
\item \link{save} -- Save the results to a specified file.
\item \code{print} -- Print useful information about the object.
\item \code{summary} -- Shows, in form of a list, the most important attributes.
\item \code{as.matrix} -- Returns the probability matrix.
\item \code{write.csv} -- Writes the probability matrix in a \code{.csv} file.
\item \code{dput} -- Writes the object in a \code{.rda} file.
\item \code{logLik} -- Returns the log-likelihood from the last iteration.
}
}

\examples{

# Example 1: Create an eim object from a JSON file
\dontrun{
model1 <- eim(json_path = "path/to/file.json")
}

# Example 2: Use simulate_election with optional parameters, then create an eim object
# from matrices

# Simulate data for 50 ballot boxes, 4 candidates and 5 groups
sim_result <- simulate_election(
    num_ballots = 50,
    num_candidates = 4,
    num_groups = 5,
    group_proportions = c(0.2, 0.2, 0.4, 0.1, 0.1),
)

model2 <- eim(X = sim_result$X, W = sim_result$W)

# Example 3: Create an object from a user defined matrix

x_mat <- matrix(c(
    10, 20, 30, 40,
    15, 25, 35, 45,
    12, 22, 32, 42
), nrow = 3, ncol = 4, byrow = TRUE)

w_mat <- matrix(c(
    100, 150, 200, 250, 300,
    110, 160, 210, 260, 310,
    120, 170, 220, 270, 320
), nrow = 3, ncol = 5, byrow = TRUE)

model3 <- eim(X = x_mat, W = w_mat, mismatch = TRUE)
}
