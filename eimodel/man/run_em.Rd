% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eim-class.R
\name{run_em}
\alias{run_em}
\title{Compute the Expected-Maximization Algorithm}
\usage{
run_em(
	object = NULL,
 X = NULL,
 W = NULL,
 json_path = NULL,
 method = "mult",
 initial_prob = "group_proportional",
 mismatch = FALSE,
 maxiter = 1000,
 maxtime = 3600,
 stop_threshold = 0.001,
 verbose = FALSE,
 ...
)
}
\arguments{
\item{object}{An object of class \code{eim}, which can be created using the \link{eim} function.
This parameter should not be called if you prefer to supply the \code{X} and \code{W} matrices or a \code{json_path}.}

\item{method}{An optional string specifying the method used for estimating the E-step. Valid
options are:
\itemize{
\item \code{mult}: The default method, using a Multinomial distribution.
\item \code{mvn_cdf}: Uses a Multivariate Normal CDF distribution.
\item \code{mvn_pdf}: Uses a Multivariate Normal PDF distribution.
\item \code{hnr}: Uses importance sampling to approximate the exact solution.
\item \code{exact}: Uses the determinant approach.
}

For a detailed description of each method, see \strong{References}.}

\item{initial_prob}{An optional string specifying the method used to obtain the initial
probability. Accepted values are:
\itemize{
\item \code{uniform}: Assigns equal probability to every candidate within each group.
\item \code{proportional}: Assigns probabilities to each group based on the proportion of candidates votes.
\item \code{group_proportional}: Computes the probability matrix by taking into account both group and candidate proportions. This is the default method.
}}

\item{mismatch}{Boolean, if \code{TRUE} allows a mismatch between the voters and votes for each ballot-box, only works if method is \code{mvn_cdf}, \code{mvn_pdf}, and \code{mult}. If \code{FALSE}, throws an error if there is a mismatch. By default it is \code{FALSE}.}

\item{maxiter}{An optional integer indicating the maximum number of Expected-Maximization algorithm iterations.
The default value is \code{1000}.}

\item{maxtime}{An optional numeric specifying the maximum running time (in seconds) for the
algorithm. This is checked at every iteration of the EM algorithm. The default value is \code{3600}, which corresponds to an hour.}

\item{stop_threshold}{An optional numeric value indicating the minimum difference between
consecutive probability estimates required to stop iterating. The default value is \code{0.001}.}

\item{verbose}{An optional boolean indicating whether to print informational messages during
iteration. The default value is \code{FALSE}.}

\item{step_size}{An optional integer specifying the step size for the \code{hnr}
algorithm. This parameter is only applicable when using the \code{hnr} method and will
be ignored otherwise. The default value is \code{3000}.}

\item{samples}{An optional integer indicating the number of samples to generate for the
\strong{Hit and Run} method. This parameter is only relevant when the \code{hnr} method is selected.
The default value is \code{1000}.}

\item{mc_method}{An optional string specifying the method used to estimate the \code{mvn_cdf} method
via a Monte Carlo simulation. Accepted values are \code{genz} and \code{genz2}, with \code{genz2}
set as the default. This parameter is only applicable when using the \code{mvn_cdf} method. See \strong{References} for more details.}

\item{mc_error}{An optional numeric value defining the error threshold for the Monte Carlo
simulation when estimating the \code{mvn_cdf} method. The default value is \code{1e-6}. This parameter is only relevant
when the method is \code{mvn_cdf}.}

\item{mc_samples}{An optional integer specifying the number of Monte Carlo
samples for the \code{mvn_cdf} method. The default value is \code{5000}. This argument is only applicable when the method is \code{mvn_cdf}.}
}
\value{
The function updates (or creates) the input object by adding the following attributes:
\describe{
\item{prob}{The estimated probability matrix.}
\item{cond_prob}{The probability that a voter of group \code{g} in ballot box \code{b} voted for candidate \code{c} conditional on observed result. Stored as an array of \verb{(g x c)} matrices.}
\item{logLik}{An array containing the log-likelihood values from each iteration.}
\item{iterations}{The total number of iterations performed by the EM algorithm.}
\item{time}{The total execution time of the algorithm.}
\item{status}{
The final status ID of the algorithm upon completion:
\itemize{
\item \code{0}: Convergence achieved.
\item \code{1}: Maximum time reached.
\item \code{2}: Maximum iterations reached.
}
}
\item{message}{The finishing status displayed as a message.}
\item{method}{The method used for estimating the E-step.}
}
Aditionally, it will create \code{samples} and \code{step_size} parameters if the specified method is \code{hnr}, or \code{mc_method}, \code{mc_error} and \code{mc_samples} if the method is \code{mvn_cdf}.
}
\description{
Executes the Expectation-Maximization (EM) algorithm indicating the approximation method to use in the \emph{E}-step.
Certain methods may require additional arguments, which can be passed through \code{...}.
}
\note{
This function can be executed using one of three mutually exclusive approaches:
\enumerate{
\item By providing an existing \code{eim} object.
\item By supplying both input matrices (\code{X} and \code{W}) directly.
\item By specifying a JSON file (\code{json_path}) containing the matrices.
}

These input methods are \strong{mutually exclusive}, meaning that you must provide \strong{exactly one} of
these options. Attempting to provide more than one or none of these inputs will result in an error.

When called with an \code{eim} object, the function updates the object with the computed results.
If an \code{eim} object is not provided, the function will create one internally using either the
supplied matrices or the data from the JSON file before executing the algorithm.
}
\examples{
# Example 1: Compute the Expected-Maximization with default settings
simulations <- simulate_elections(
    num_ballots = 300,
    num_candidates = 5,
    num_groups = 3,
)
model <- eim(simulations$X, simulations$W)
model <- run_em(model) # Returns the object with updated attributes

# Example 2: Compute the Expected-Maximization using the Hit and Run method
model <- run_em(
    object = model,
    method = "hnr",
    step_size = 1500,
    samples = 800
)

# Example 3: Run the MVN CDF method with default settings
model <- run_em(object = model, method = "mvn_cdf")

# Example 4: Perform an Exact estimation using user-defined parameters
\dontrun{
run_em(
    json_path = "a/json/file.json",
    method = "exact",
    initial_prob = "uniform",
    maxiter = 10,
    maxtime = 600,
    stop_threshold = 1e-3,
    verbose = TRUE
)
}

}
\references{
\href{https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4832834}{Thraves, C. and Ubilla, P.: \emph{"Fast Ecological Inference Algorithm for the RÃ—C Case"}}. Aditionally, the MVN CDF is computed by the methods introduced in \href{https://www.researchgate.net/publication/2463953_Numerical_Computation_Of_Multivariate_Normal_Probabilities}{Genz, A. (2000). Numerical computation of multivariate normal probabilities. \emph{Journal of Computational and Graphical Statistics}}
}
\seealso{
The \link{eim} object implementation.
}
