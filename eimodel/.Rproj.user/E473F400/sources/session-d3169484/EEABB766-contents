% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rxc-package.R
\name{rxc}
\alias{rxc}
\title{An R6 Class for estimating an RxC matrix from an ecological inference problem.}
\description{
This class implements an EM algorithm using different methods for approximating the E-step such as "Multinomial",
"Hit and Run", "MVN CDF", "MVN PDF", and "Exact".
}
\examples{

## ------------------------------------------------
## Method `rxc$new`
## ------------------------------------------------

# Example 1: Create a rxc object from a matrix
model <- rxc$new(X = matrix(1:9, 3, 3), W = matrix(1:9, 3, 3))

# Example 2: Create a rxc object from a JSON file
\dontrun{
model2 <- rxc$new(json_path = "a/file/path/to/a/file.json")
	}

## ------------------------------------------------
## Method `rxc$precompute`
## ------------------------------------------------

# Example 1: Precompute the Hit and Run method
model <- rxc$new(X = matrix(1:9, 3, 3), W = matrix(1:9, 3, 3))
model$precompute("Hit and Run", step_size = 1000, samples = 5000) # Changes are made on C internals API

# Example 2: Precompute the Exact method
model$precompute("Exact")

## ------------------------------------------------
## Method `rxc$compute`
## ------------------------------------------------

# Example 1: Compute the Expected Maximization with default values
model <- rxc$new(X = matrix(1:9, 3, 3), W = matrix(1:9, 3, 3))
model$compute() # Retrieves the object with updated attributes

# Example 2: Compute the Expected Maximization for the Hit and Run method
\donttest{
		model$compute(main_method = "Hit and Run", step_size = 3000, samples = 1000)
	}

# Example 3: Omit arguments to the Hit and Run method
\dontrun{
		model$compute(main_method = "Hit and Run", step_size = 3000) # -> Error x; must hand in samples parameter too
		}

# Example 4: Run the MVN CDF with default values
model$compute(main_method = "MVN CDF")

# Example 5: Run a Exact estimation with user defined parameters
model$compute(main_method = "Exact", probability_method = "Uniform", iterations = 5, stopping_threshold = 1e-3) # Verbose was omitted

## ------------------------------------------------
## Method `rxc$print`
## ------------------------------------------------

model <- rxc$new(X = matrix(1:9, 3, 3), W = matrix(1:9, 3, 3))
print(model) # Will print the X and W matrix.

model$compute()
print(model) # Will print the Xand W matrix among the EM results.

## ------------------------------------------------
## Method `rxc$summary`
## ------------------------------------------------

model <- rxc$new(X = matrix(1:15, 5, 3), W = matrix(1:10, 2, 5))
a_list <- model$summary()
a_list$method # Not computed yet
a_list$groups # 2
a_list$ballots # 5
names(a_list) # "candidates" "groups" "ballots" "method" "probabilities" "logLikelihood"

## ------------------------------------------------
## Method `rxc$save_results`
## ------------------------------------------------

model <- rxc$new(X = matrix(1:9, 3, 3), W = matrix(1:9, 3, 3), method = "Multinomial")
model$computeEM()
model$save_results("results.rds")  # Save as RDS
model$save_results("results.json") # Save as JSON
model$save_results("results.csv")  # Save final probability as CSV
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{X}}{(matrix) A (b x c) matrix with the observed results of the candidate votes (c) on a given
ballot box (b). Provided manually or loaded from JSON.}

\item{\code{W}}{(matrix) A (b x g) matrix with the observed results of the demographical group votes (g) on
a given ballot box (b). Provided manually or loaded from JSON.}

\item{\code{method}}{(character) A string indicating the EM method. One of: "Multinomial", "Hit and Run", "MVN CDF",
"MVN PDF", "Exact".}

\item{\code{probability}}{(matrix) A (g x c) matrix that would store the final estimated probabilities of having
a given group (g) voting for a candidate (c).}

\item{\code{logLikelihood}}{(numeric) A numeric vector that will store the log-likelihood values among the total
iterations of the Expected Maximization algorithm.}

\item{\code{total_iterations}}{(integer(1)) An integer indicating the total iterations that the Expected Maximization
algorithm did.}

\item{\code{total_time}}{(numeric(1)) The time that the EM algorithm took.}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{samples}}{(integer(1)) Active variable to show the Hit and Run samples if and only if the method is "Hit and Run"}

\item{\code{step_size}}{(integer(1)) Active variable to show the Hit and Run step size if and only if the method is "Hit and Run"}

\item{\code{multivariate_method}}{(character) Active variable to show the method used to estimate the Multivariate
Normal CDF, if and only if self$method is "MVN CDF"}

\item{\code{multivariate_error}}{(numeric(1)) Active variable to show the error threshold for the Montecarlo simulation of the Multivariate Normal CDF}

\item{\code{multivariate_iterations}}{(numeric(1)) Active variable to show the error threshold for the Montecarlo simulation of the Multivariate Normal CDF}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-rxc-new}{\code{rxc$new()}}
\item \href{#method-rxc-precompute}{\code{rxc$precompute()}}
\item \href{#method-rxc-compute}{\code{rxc$compute()}}
\item \href{#method-rxc-print}{\code{rxc$print()}}
\item \href{#method-rxc-summary}{\code{rxc$summary()}}
\item \href{#method-rxc-save_results}{\code{rxc$save_results()}}
\item \href{#method-rxc-clone}{\code{rxc$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rxc-new"></a>}}
\if{latex}{\out{\hypertarget{method-rxc-new}{}}}
\subsection{Method \code{new()}}{
Creates the object by defining the X and W matrix attributes.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{rxc$new(X = NULL, W = NULL, json_path = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{X}}{(matrix) A matrix (c x b) of observed candidates (c) votes per ballot boxes (b) (optional, required if json_path is NULL).}

\item{\code{W}}{(matrix) A matrix (b x g) of observed demographic (g) group votes per ballot boxes (b) (optional, required if json_path is NULL).}

\item{\code{json_path}}{(character) A string containing a path to a JSON file with "X" and "W" matrices. (optional, required if X or W are NULL)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An initialized rxc object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Example 1: Create a rxc object from a matrix
model <- rxc$new(X = matrix(1:9, 3, 3), W = matrix(1:9, 3, 3))

# Example 2: Create a rxc object from a JSON file
\dontrun{
model2 <- rxc$new(json_path = "a/file/path/to/a/file.json")
	}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rxc-precompute"></a>}}
\if{latex}{\out{\hypertarget{method-rxc-precompute}{}}}
\subsection{Method \code{precompute()}}{
Calculates the EM-independent variables for the Hit and Run and Exact method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{rxc$precompute(method, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{method}}{The method for precomputing. Options: "Hit and Run", "Exact"}

\item{\code{...}}{Additional arguments required by specific methods:
\itemize{
  \item **"Hit and Run" Method:**
    \itemize{
      \item step_size The step size (M) for the Hit and Run algorithm. Must be a positive integer.
      \item samples The number of samples (S) to generate. Must be a integer
    }
}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The modified rxc object (for method chaining). Updates are made on the C internal memory.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Example 1: Precompute the Hit and Run method
model <- rxc$new(X = matrix(1:9, 3, 3), W = matrix(1:9, 3, 3))
model$precompute("Hit and Run", step_size = 1000, samples = 5000) # Changes are made on C internals API

# Example 2: Precompute the Exact method
model$precompute("Exact")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rxc-compute"></a>}}
\if{latex}{\out{\hypertarget{method-rxc-compute}{}}}
\subsection{Method \code{compute()}}{
Executes the Expectation-Maximization (EM) algorithm based on the selected method. Additional parameters may be required depending on the method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{rxc$compute(
  main_method = "Multinomial",
  probability_method = "Group proportional",
  iterations = 1000,
  stopping_threshold = 0.001,
  verbose = FALSE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{main_method}}{(character) The method for estimating the Expectation-Maximization (EM) algorithm. Options:
"Multinomial", "MVN CDF", "MVN PDF", "Hit and Run" and "Exact" (default: "Multinomial").}

\item{\code{probability_method}}{(character) The method for obtaining the initial probability. Options: "Group proportional",
"Proportional", "Uniform". (default: "Group proportional").}

\item{\code{iterations}}{(integer(1)) The maximum amount of iterations to perform on the EM algorithm. (default: 1000).}

\item{\code{stopping_threshold}}{(numeric(1)) The minimum difference between consequent probabilities for stopping the iterations.
(default: 0.001).}

\item{\code{verbose}}{(boolean(1)) Boolean indicating wether to print useful messages while iterating. (default: FALSE).}

\item{\code{...}}{Additional arguments required by specific methods:
\itemize{
  \item **"Hit and Run" Method:**
    \itemize{
      \item step_size (Integer): The step size (M) for the Hit and Run algorithm.
      \item samples (Integer): The number of samples (S) to generate.
    }
  \item **"MVN CDF" Method:**
    \itemize{
      \item multivariate_method (Character): The integration method. Default is "Genz2".
      \item multivariate_error (Numeric): The integration error threshold. Default is 1e-6.
      \item multivariate_iterations (Integer): The number of Monte Carlo iterations. Default is 5000.
    }
}'}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The modified rxc object (for method chaining).
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Example 1: Compute the Expected Maximization with default values
model <- rxc$new(X = matrix(1:9, 3, 3), W = matrix(1:9, 3, 3))
model$compute() # Retrieves the object with updated attributes

# Example 2: Compute the Expected Maximization for the Hit and Run method
\donttest{
		model$compute(main_method = "Hit and Run", step_size = 3000, samples = 1000)
	}

# Example 3: Omit arguments to the Hit and Run method
\dontrun{
		model$compute(main_method = "Hit and Run", step_size = 3000) # -> Error x; must hand in samples parameter too
		}

# Example 4: Run the MVN CDF with default values
model$compute(main_method = "MVN CDF")

# Example 5: Run a Exact estimation with user defined parameters
model$compute(main_method = "Exact", probability_method = "Uniform", iterations = 5, stopping_threshold = 1e-3) # Verbose was omitted
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rxc-print"></a>}}
\if{latex}{\out{\hypertarget{method-rxc-print}{}}}
\subsection{Method \code{print()}}{
According to the state of the algorithm (either computed or not), it prints a message with its most relevant parameters
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{rxc$print()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The own object for method chaining.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{model <- rxc$new(X = matrix(1:9, 3, 3), W = matrix(1:9, 3, 3))
print(model) # Will print the X and W matrix.

model$compute()
print(model) # Will print the Xand W matrix among the EM results.
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rxc-summary"></a>}}
\if{latex}{\out{\hypertarget{method-rxc-summary}{}}}
\subsection{Method \code{summary()}}{
Shows, in form of a list, a selection of the most important atributes. It'll retrieve the method, amount of candidates, ballots and groups and the principal resuls of the EM algorithm.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{rxc$summary()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(list) A list with the method, candidates, ballots, group, probabilities and log-likelihood.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{model <- rxc$new(X = matrix(1:15, 5, 3), W = matrix(1:10, 2, 5))
a_list <- model$summary()
a_list$method # Not computed yet
a_list$groups # 2
a_list$ballots # 5
names(a_list) # "candidates" "groups" "ballots" "method" "probabilities" "logLikelihood"
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rxc-save_results"></a>}}
\if{latex}{\out{\hypertarget{method-rxc-save_results}{}}}
\subsection{Method \code{save_results()}}{
Saves the current rxc object to a specified file. The results can be saved in:
  \itemize{
    \item **RDS (Binary format)**: Preserves object structure for future use in R.
    \item **JSON**: Saves model data in a human-readable format.
    \item **CSV**: Saves probability matrix in a tabular format.
  }
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{rxc$save_results(filename)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filename}}{(character) The file name where the results should be saved with its extension.
The file extension determines the format:
\itemize{
  \item *.rds → Saves as **RDS** (default, binary format).
  \item *.json → Saves as **JSON** (readable and shareable).
  \item *.csv → Saves the **final probability matrix** as CSV.
}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The modified rxc object (for method chaining).
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{model <- rxc$new(X = matrix(1:9, 3, 3), W = matrix(1:9, 3, 3), method = "Multinomial")
model$computeEM()
model$save_results("results.rds")  # Save as RDS
model$save_results("results.json") # Save as JSON
model$save_results("results.csv")  # Save final probability as CSV
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rxc-clone"></a>}}
\if{latex}{\out{\hypertarget{method-rxc-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{rxc$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
