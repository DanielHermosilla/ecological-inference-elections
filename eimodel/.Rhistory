for (i in 1:4) {
for (j in 0:2) {
View(as.data.frame(table(iris[(1+j*50):(50+j*50),i])))
}}
for (i in 1:4) {
print(table(iris[1:50,i]))
}
for (i in 1:4) {
for (j in 0:2) {
print(table(iris[((50*j)+1):(50*(j+1)),i]))
}}
> for (i in 1:4) {
+ for (j in 0:2) {
+ print(table(iris[((50*j)+1):(50*(j+1)),i]))
+ }}
for (i in 1:4) {+ for (j in 0:2) {
+ print(table(iris[((50*j)+1):(50*(j+1)),i]))
+ }}
for (i in 1:4) {
+ for (j in 0:2) {
+ print(table(iris[((50*j)+1):(50*(j+1)),i]))
+ }}
for (i in 1:4) {
+ for (j in 0:2) {
+ print(table(iris[((50*j)+1):(50*(j+1)),i]))
+ }}
for (i in 1:4) {
for (j in 0:2) {
h = hola
print(h)
print(table(iris[((50*j)+1):(50*(j+1)),i]))
}}
for (i in 1:4) {
for (j in 0:2) {
print("hola")
print(table(iris[((50*j)+1):(50*(j+1)),i]))
}}
print(iris[1,1])
print(iris[0,1])
print(label(iris))
label(iris)
Columna = c("Sepal Length", "Sepal Width", "Petal Length", "Petal Width")
Columna[1]
iris
Especie = c("Setosa", "Versicolor", "Virginica")
for (i in 1:4) {
for (j in 0:2) {
print(Especie[1,(j+1)])
print(Columna[1,i])
print(table(iris[((50*j)+1):(50*(j+1)),i]))
}}
Especie[1,1]
for (i in 1:4) {
for (j in 0:2) {
print(Especie[(j+1)])
print(Columna[i])
print(table(iris[((50*j)+1):(50*(j+1)),i]))
}}
table(iris[1:50,3])
print(Columna[1], Especie[1])
print(Columna[1] & Especie[1])
print("hola" Columna[1])
print("Columna[1]") print("Especie[1]")
print("Columna[1]")
print(Columna[1])
print(Columna[1] $ Especie[1])
Columna
cat(Columna[1])
for (i in 1:4) {
for (j in 0:2) {
print(Columna[1])
}}
for (i in 1:4) {
for (j in 0:2) {
cut(Especie[(j+1)])
cut(Columna[i])
print(table(iris[((50*j)+1):(50*(j+1)),i]))
}}
especie[1]
cut(Especie[1])
Especie[1]
(as.data.frame(table(iris[1:50,1])
View(as.data.frame(table(iris[1:50,1])
as.data.frame(table(iris[1:50,1]))
print(as.data.frame(table(iris[1:50,1])))
for (i in 1:4) {
for (j in 0:2) {
print(Especie[(j+1)])
print(Columna[i])
print(as.data.frame(table(iris[((50*j)+1):(50*(j+1)),i])))
}}
Columna = c("Sepal Length", "Sepal Width", "Petal Length", "Petal Width")
Columna
for (j in 0:2) {
for (i in 1:4) {
print(Especie[(j+1)])
print(Columna[i])
print(as.data.frame(table(iris[((50*j)+1):(50*(j+1)),i])))
}}
print(as.data.frame(table(iris[1:50,1])))
print(as.data.frame(table(iris[1:50,1])),row.names = Largo)
print(as.data.frame(table(iris[1:50,1])),row.names = "Largo")
print(as.data.frame(table(iris[1:50,1])), row.names = "1")
print(as.data.frame(table(iris[1:50,1])), row.names = )
print(as.data.frame(table(iris[1:50,1])), row.names = a)
print(as.data.frame(table(iris[1:50,1])), row.names = "a","b")
print(as.data.frame(table(iris[1:50,1])), row.names.data.frame("a"))
print(as.data.frame(table(iris[1:50,1])), row.names("a","b")
"a"
print(row.names(as.data.frame(table(iris[1:50,1]))))
tablafrec <- as.data.frame(table(iris[1:50.1]))
tablafrec <- as.data.frame(table(iris[1:50,1]))
tablafrec
transform(tablafrec,
FreqAc = cumsum(Freq),
Rel = round(prop.table(Freq), 3),
RelAc = round(cumsum(prop.table(Freq)), 3))
transform(tablafrec,
Rel = round(prop.table(Freq), 3))
transform(tablafrec,
Rel = round(prop.table(Freq), 3)
)
for (j in 0:2) {
for (i in 1:4) {
print(Especie[(j+1)])
print(Columna[i])
tablafrec <- as.data.frame(table(iris[((50*j)+1):(50*(j+1)),i]))
transform(tablafrec,
Rel = round(prop.table(Freq), 3))
tablafrec
}}
tablafrec
for (j in 0:2) {
for (i in 1:4) {
print(Especie[(j+1)])
print(Columna[i])
tablafrec <- as.data.frame(table(iris[((50*j)+1):(50*(j+1)),i]))
transform(tablafrec,
Rel = round(prop.table(Freq), 3))
print(tablafrec)
}}
tablafrec
transform(tablafrec,
Rel = round(prop.table(Freq), 3))
for (j in 0:2) {
for (i in 1:4) {
print(Especie[(j+1)])
print(Columna[i])
tablafrec <- as.data.frame(table(iris[((50*j)+1):(50*(j+1)),i]))
print(transform(tablafrec,)
Rel = round(prop.table(Freq), 3))
}}
for (j in 0:2) {
for (i in 1:4) {
print(Especie[(j+1)])
print(Columna[i])
tablafrec <- as.data.frame(table(iris[((50*j)+1):(50*(j+1)),i]))
print((transform(tablafrec,
Rel = round.(prop.table(Freq),3)))
}}
for (j in 0:2) {
for (i in 1:4) {
print(Especie[(j+1)])
print(Columna[i])
tablafrec <- as.data.frame(table(iris[((50*j)+1):(50*(j+1)),i]))
print(transform(tablafrec,
Rel = round(prop.table(Freq),3)))
}}
print("ola")
print("ola")
print("ola")
# Ejercicio 1
#Inciso A
pauta = c(4, 2, 5, 1, 4, 3, 2, 5, 1, 3, 2)
#Ejercicio 2
#Inciso A
Columna = c("Sepal Length", "Sepal Width", "Petal Length", "Petal Width")
Especie = c("Setosa", "Versicolor", "Virginica")
for (j in 0:2) {
for (i in 1:4) {
print(Especie[(j+1)])
print(Columna[i])
tablafrec <- as.data.frame(table(iris[((50*j)+1):(50*(j+1)),i]))
print(transform(tablafrec,
Rel = round(prop.table(Freq),3)))
}}
#Ejercicio 2
#Inciso A
Columna = c("Sepal Length", "Sepal Width", "Petal Length", "Petal Width")
Especie = c("Setosa", "Versicolor", "Virginica")
for (j in 0:2) {
for (i in 1:4) {
print(Especie[(j+1)])
print(Columna[i])
tablafrec <- as.data.frame(table(iris[((50*j)+1):(50*(j+1)),i]))
print(transform(tablafrec,
Rel = round(prop.table(Freq),3)))
}}
#Frecuencia de las especies, esto es lo que se pide en la instrucción
print("Tabla de especies")
frec_especies = as.data.frame(table(iris$Species))
print(transform(frec_especies,
Rel = round(prop.table(Freq),3)))
#Inciso B
aggregate(iris[,3], list(iris$Species), mean)
#Inciso C
plot(table(iris$Sepal.Length),main="Distribución de frecuencias del largo del sépalo", sub = " 􏰀→ Actividad 2", xlab = "Largo del sépalo", ylab = "Frecuencia")
#Inciso D
plot(iris$Sepal.Length, iris$Sepal.Width, main = "Largo del sépalo vs ancho del sépalo", sub = "Actividad 2", xlab = "Largo del sépalo", ylab = "Ancho del sépalo")
plot(iris$Petal.Length, iris$Petal.Width, main = "Largo del pétalo vs ancho del pétalo", sub = "Actividad 2", xlab = "Largo del pétalo", ylab = "Ancho del pétalo")
#Inciso E
#Correlación del sépalo
cor(iris$Sepal.Length,iris$Sepal.Width)
#Correlación del pétalo
cor(iris$Petal.Length,iris$Petal.Width)
echo "ola"
print("hola")
print("hola")
library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess")
install.packages("knitr")
install.packages("knitr")
install.packages("rmarkdown")
lintr:::addin_lint()
library(infPackage2)
devtools::test()
setwd("infPackage2")
devtools::test()
result <- random_samples(
c(5, 20), # Ballots range
c(2, 4), # Candidates range
c(2, 4), # Demographic group range
c(20, 100) # Votes per ballot range
)
result
model$new(result$X, result$W)
model <- eim$new(result$X, result$W)
model$compute()
results$ground_truth
result$ground_truth
mean(abs(result$ground_truth - model$probability))
for (i in 1:tests) {
result <- random_samples(
c(50, 100), # Ballots range
c(2, 4), # Candidates range
c(2, 4), # Demographic group range
c(50, 100) # Votes per ballot range
)
result$ground_truth
}
)
result
model <- eim$new(result$X, result$W)
model$compute()
result$ground_truth
library(jsonlite)
write_json(result, path = "test.json", pretty = TRUE, auto_unbox = TRUE)
devtools::test()
model
model$compute(main_method = "MVN CDF")
model
model$logLikelihood
devtools::load_all()
devtools::load_all()
a <- simulate_votation(5, 3, 3, (50, 50, 50, 50), 0.5)
a <- simulate_votation(5, 3, 3, c(50, 50, 50, 50), 0.5)
a <- simulate_votation(5, 3, 3, c(50, 50, 50, 50, 50), 0.5)
source("~/infPackage2/R/instancer.R")
a <- simulate_votation(5, 3, 3, c(50, 50, 50, 50, 50), 0.5)
source("~/infPackage2/R/instancer.R")
a <- simulate_votation(5, 3, 3, c(50, 50, 50, 50, 50), 0.5)
source("~/infPackage2/R/instancer.R")
a <- simulate_votation(5, 3, 3, c(50, 50, 50, 50, 50), 0.5)
a
b <- model(a$X, a$W)
b <- eim$new(a$X, a$W)
b$compute()
a <- simulate_votation(5, 3, 3, c(50, 50, 50, 50, 50), 0.1)
a
b <- eim$new(a$X, a$W)
b$compute()
a <- simulate_votation(50, 3, 3, rep(100,50), 0.1)
a
b <- eim$new(a$X, a$W)
b$compute()
source("~/infPackage2/R/instancer.R")
a <- random_samples(c(50,60), c(2,4), c(2,4), c(50,80))
a <- random_samples(c(50,60), c(2,4), c(2,4), c(50,80))
source("~/infPackage2/R/instancer.R")
a <- random_samples(c(50,60), c(2,4), c(2,4), c(50,80))
source("~/infPackage2/R/instancer.R")
a <- random_samples(c(50,60), c(2,4), c(2,4), c(50,80))
a
devtools::document()
devtools::document()
devtools::build_manual()
a <- random_samples(c(50,60), c(2,4), c(2,4), c(50,80))
a
devtools::test()
devtools::load_all()
devtools::test()
result <- random_samples(
c(100, 200), # Ballots range
c(2, 10), # Candidates range
c(2, 10), # Demographic group range
c(80, 120) # Votes per ballot range
)
result
a <- eim$new(a$X, a$W)
a$compute()
b <- eim$new(result$X, result$W)
b
result
source("~/infPackage2/R/eim-package.R")
b
devtools::load_all()
b
b$compute()
result$ground_truth
mean(abs(result$ground_truth-b$probability))
devtools::build_manual()
devtools::build_manual()
rland::last_trace()
rlang::last_trace()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::load_all()
devtools::load_all()
library(infPackage2)
simulations <- simulate_votation(num_ballots = 50, num_candidates = 5, num_demographics = 5, ballot_voters = c(100,50))
simulations <- simulate_votation(num_ballots = 50, num_candidates = 5, num_demographics = 5, ballot_voters = c(50,100))
simulations <- simulate_votation(num_ballots = 50, num_candidates = 5, num_demographics = 5, ballot_voters = rep(100,50))
model <- eim$new(X = simulations$X, W = simulations$W)
model$bootstrap(30, 10)
source("~/infPackage2/R/eim-package.R")
model$bootstrap(30, 10)
model$bootstrap(30, 10)
model$bootstrap(as.int(30), as.int(10))
model$bootstrap(as.int(30), w21312)
model
model$bootstrap(as.integer(30), as.integer(10))
model$bootstrap(as.integer(30), as.integer(10))
model$bootstrap(30, 10)
source("~/infPackage2/R/eim-package.R")
model$bootstrap(30, 10)
model$bootstrap(30, 10)
devtools::load_all()
simulations <- simulate_votation(num_ballots = 50, num_candidates = 5, num_demographics = 5, ballot_voters = rep(100,50))
model <- eim$new(X = simulations$X, W = simulations$W)
model$bootstrap(30, 10)
devtools::load_all()
simulations <- simulate_votation(num_ballots = 50, num_candidates = 5, num_demographics = 5, ballot_voters = rep(100,50))
model <- eim$new(X = simulations$X, W = simulations$W)
model$bootstrap(30, 10)
model
nrow(model$X)
devtools::load_all()
simulations <- simulate_votation(num_ballots = 50, num_candidates = 5, num_demographics = 5, ballot_voters = rep(100,50))
model <- eim$new(X = simulations$X, W = simulations$W)
model$bootstrap(30, 10)
nrow(model$X)
10 >= nrow(model$X)
ncol(self$X)
ncol(model$X)
devtools::load_all()
simulations <- simulate_votation(num_ballots = 50, num_candidates = 5, num_demographics = 5, ballot_voters = rep(100,50))
model <- eim$new(X = simulations$X, W = simulations$W)
model$bootstrap(30, 10)
nrow(model$X)
source("~/infPackage2/R/eim-package.R")
nrow(model$X)
model$bootstrap(30, 10)
model <- eim$new(X = simulations$X, W = simulations$W)
model$bootstrap(30, 10)
devtools::load_all()
simulations <- simulate_votation(num_ballots = 50, num_candidates = 5, num_demographics = 5, ballot_voters = rep(100,50))
model <- eim$new(X = simulations$X, W = simulations$W)
model$bootstrap(30, 10)
model
devtools::load_all()
simulations <- simulate_votation(num_ballots = 50, num_candidates = 5, num_demographics = 5, ballot_voters = rep(100,50))
model <- eim$new(X = simulations$X, W = simulations$W)
model$bootstrap(30, 10)
simulations <- simulate_votation(num_ballots = 50, num_candidates = 5, num_demographics = 5, ballot_voters = rep(100,50))
devtools::load_all()
simulations <- simulate_votation(num_ballots = 50, num_candidates = 5, num_demographics = 5, ballot_voters = rep(100,50))
model <- eim$new(X = simulations$X, W = simulations$W)
model$bootstrap(30, 10)
1:nrow(model$X)
devtools::load_all()
simulations <- simulate_votation(num_ballots = 50, num_candidates = 5, num_demographics = 5, ballot_voters = rep(100,50))
model <- eim$new(X = simulations$X, W = simulations$W)
model$bootstrap(30, 10)
model$bootstrap(30, 10)
n
model$bootstrap(30, 10)
q
n
wq
ke
devtools::load_all()  # or Ctrl+Shift+L in RStudio
simulations <- simulate_votation(num_ballots = 50, num_candidates = 5, num_demographics = 5, ballot_voters = rep(100,50))
model <- eim$new(X = simulations$X, W = simulations$W)
model$bootstrap(30, 10)
devtools::load_all()  # or Ctrl+Shift+L in RStudio
simulations <- simulate_votation(num_ballots = 50, num_candidates = 5, num_demographics = 5, ballot_voters = rep(100,50))
model <- eim$new(X = simulations$X, W = simulations$W)
model$bootstrap(30, 10)
1
1
model
source("~/infPackage2/R/eim-package.R")
simulations <- simulate_votation(num_ballots = 50, num_candidates = 5, num_demographics = 5, ballot_voters = rep(100,50))
model <- eim$new(X = simulations$X, W = simulations$W)
devtools::clean_dll()
uninstall.packages("infPackage2")
remove.packages("infPackage2")
devtools::build()
devtools::install()
library(infPackage2)
simulations <- simulate_votation(num_ballots = 20,
num_candidates = 5,
num_demographics = 3,
ballot_voters = c(100, 20))
simulations <- simulate_votation(num_ballots = 20,
num_candidates = 5,
num_demographics = 3,
ballot_voters = c(100, 20))
simulations <- simulate_votation(num_ballots = 50, num_candidates = 5, num_demographics = 5, ballot_voters = rep(100,50))
simulations
model <- eim$new(X=simulations$X, W=simulations$W)
library(Rcpp)
Rcpp::compileAttributes()
Rcpp::compileAttributes()
devtools::build()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install_all()
devtools::install()
simulations <- simulate_votation(num_ballots = 20,
num_candidates = 5,
num_demographics = 3,
ballot_voters = rep(100, 20))
model <- eim$new(X=simulations$X, W=simulations$W)
library(infPackage2)
library(infPackage2)
simulations <- simulate_votation(num_ballots = 20,
num_candidates = 5,
num_demographics = 3,
ballot_voters = rep(100, 20))
model <- eim$new(X=simulations$X, W=simulations$W)
remove.packages("infPackage2")
devtools::install()
infPackage2:::RsetParameters
simulations <- simulate_votation(num_ballots = 20,
num_candidates = 5,
num_demographics = 3,
ballot_voters = rep(100, 20))
simulations
model <- eim$new(X=simulations$X, W=simulations$W)
infPackage2:::RsetParameters
devtools::document()
devtools::compile_attributes()
devtools::clean_dll()
devtools::build()
devtools::install()
library(infPackage2)
library(infPackage2)
simulations <- simulate_votation(num_ballots = 20,
num_candidates = 5,
num_demographics = 3,
ballot_voters = rep(100, 20))
model <- eim$new(X=simulations$X, W=simulations$W)
devtools::clean_dll()
remove.packages("infPackage2")
library(Rcpp)
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
devtools::build()
devtools::document()
devtools::install()
library(infPackage2)
ls::
simulations <- simulate_votation(num_ballots = 20,
num_candidates = 5,
num_demographics = 3,
ballot_voters = rep(100, 20))
simulations
model <- eim$new(X=simulations$X, W=simulations$W)
model2 <- eim$new(simulations$X, simulations$W)
eim$new(simulations$X, simulations$W)
library(infPackage2)
simulations2 <- simulate_votation(num_ballots = 20,
num_candidates = 5,
num_demographics = 3,
ballot_voters = rep(100, 20))
simulations2
model2 <- eim$new(simulations2$X, simulations2$W)
simulations2 <- simulate_votation(num_ballots = 20,
num_candidates = 5,
num_demographics = 3,
ballot_voters = rep(100, 20))
c <- eim$new(simulations2$new, simulations2$W)
c <- eim$new(simulations2$X, simulations2$W)
