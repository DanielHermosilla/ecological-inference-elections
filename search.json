[{"path":"https://danielhermosilla.github.io/ecological-inference-elections/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 fastei team Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/articles/demonstration.html","id":"estimate-voting-probabilities","dir":"Articles","previous_headings":"","what":"Estimate Voting Probabilities","title":"Demonstration of the package usage","text":"use data First Round Chilean Presidential Election 2021, ballot box voters eight age ranges (groups), candidate votes obtained. function get_eim_chile() loads data either country, region, electoral district level. shown output, returns eim object contains two matrices: number votes per candidate number votes per group. rows matrices correspond specific ballot-box, columns candidates groups, respectively. eim object used input run EM algorithm estimates voting probabilities. example, uses default method mult, efficient terms runtime. Running algorithm done calling run_em(). Note row corresponds probability demographic group (g) voted candidate (c). worth noting estimated probabilities differ substantially across groups.","code":"library(fastei)  eim_apo <- get_eim_chile(elect_district = \"APOQUINDO\")  eim_apo ## eim ecological inference model ## Candidates' vote matrix (X) [b x c]: ##     C1  C2 C3 C4 C5 C6 C7 C8 ## 37M 36  91 19 48  2  7  2  5 ## 38M 29 103 17 54  1  6  3  3 ## 39M 32  81 13 73  1  5  5  1 ## 40M 25  95 21 38  3  4  2  2 ## 41M 31  86 19 48  0  4  5  2 ## . ## . ## . ## Group-level voter matrix (W) [b x g]: ##     X18.19 X20.29 X30.39 X40.49 X50.59 X60.69 X70.79 X80. ## 37M      5     27     11     50     23     39     36   19 ## 38M      5     33     11     48     22     42     36   19 ## 39M      4     19     11     71     29     30     35   11 ## 40M      6     21      6     49     36     20     29   23 ## 41M      3     27      6     55     23     29     33   19 ## . ## . ## . eim_apo <- run_em(eim_apo) round(eim_apo$prob, 4) ##            C1     C2     C3     C4     C5     C6     C7     C8 ## X18.19 0.1802 0.3812 0.0859 0.3191 0.0105 0.0187 0.0040 0.0003 ## X20.29 0.2022 0.3427 0.0492 0.3472 0.0086 0.0163 0.0188 0.0149 ## X30.39 0.1621 0.4130 0.0418 0.3493 0.0030 0.0081 0.0188 0.0039 ## X40.49 0.0919 0.4898 0.0786 0.3271 0.0021 0.0041 0.0029 0.0034 ## X50.59 0.1486 0.4141 0.0939 0.2893 0.0011 0.0345 0.0150 0.0035 ## X60.69 0.1007 0.4989 0.0907 0.2744 0.0018 0.0218 0.0071 0.0045 ## X70.79 0.1051 0.5208 0.0844 0.2355 0.0060 0.0219 0.0172 0.0093 ## X80.   0.0759 0.5152 0.1341 0.2169 0.0061 0.0314 0.0118 0.0086"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/articles/demonstration.html","id":"standard-deviation-estimates","dir":"Articles","previous_headings":"","what":"Standard deviation estimates","title":"Demonstration of the package usage","text":"can compute standard deviation estimated probabilities using bootstrapping. can done function bootstrap(). standard deviations obtained district “Apoquindo” low general. One reason high number ballot boxes district. contrast, standard deviations estimated probabilities districts fewer ballot boxes, “Navidad”, larger. possible see difference visual way plotting standard deviations estimated probabilities across groups. Navidad Apoquindo standard deviation comparison","code":"eim_apo <- bootstrap(eim_apo, seed = 42, nboot = 30) round(eim_apo$sd, 4) ##            C1     C2     C3     C4     C5     C6     C7     C8 ## X18.19 0.0292 0.0688 0.0087 0.0404 0.0043 0.0062 0.0059 0.0018 ## X20.29 0.0091 0.0113 0.0042 0.0073 0.0013 0.0037 0.0029 0.0013 ## X30.39 0.0097 0.0113 0.0051 0.0126 0.0010 0.0020 0.0033 0.0014 ## X40.49 0.0077 0.0134 0.0078 0.0094 0.0013 0.0018 0.0017 0.0017 ## X50.59 0.0115 0.0215 0.0091 0.0173 0.0008 0.0066 0.0049 0.0012 ## X60.69 0.0105 0.0199 0.0103 0.0146 0.0010 0.0046 0.0031 0.0020 ## X70.79 0.0125 0.0220 0.0099 0.0171 0.0029 0.0058 0.0060 0.0037 ## X80.   0.0178 0.0310 0.0187 0.0248 0.0041 0.0070 0.0047 0.0036 eim_nav <- get_eim_chile(elect_district = \"NAVIDAD\") eim_nav <- bootstrap(eim_nav, seed = 42, nboot = 30) round(eim_nav$sd, 4) ##            C1     C2     C3     C4     C5     C6     C7     C8 ## X18.19 0.1092 0.2340 0.0002 0.3233 0.1278 0.0955 0.2173 0.0859 ## X20.29 0.1556 0.0754 0.0612 0.1184 0.0344 0.0009 0.1017 0.0056 ## X30.39 0.0896 0.0708 0.0597 0.0816 0.0209 0.0333 0.0409 0.0040 ## X40.49 0.0904 0.1111 0.0462 0.0629 0.0098 0.0521 0.0272 0.0072 ## X50.59 0.0815 0.0816 0.0812 0.0795 0.0013 0.0328 0.0158 0.0255 ## X60.69 0.1047 0.1017 0.1196 0.0768 0.0152 0.0794 0.0199 0.0010 ## X70.79 0.1534 0.1398 0.1374 0.0815 0.0242 0.0447 0.0364 0.0001 ## X80.   0.1526 0.0842 0.2060 0.0635 0.1175 0.2250 0.2422 0.1073 library(ggplot2) library(reshape2) library(viridis)  plot_district <- function(matrix1, district1, matrix2, district2, sd = FALSE) {     value <- ifelse(sd == FALSE, \"prob\", \"sd\")     df1 <- melt(matrix1)     df2 <- melt(matrix2)     df1$Matrix <- district1     df2$Matrix <- district2     combined_df <- rbind(df1, df2)     color <- ifelse(value == \"prob\", \"plasma\", \"viridis\")      # Add text to each cell of the matrix     combined_df$label <- sprintf(\"%.3f\", combined_df$value)     combined_df$text_color <- ifelse(combined_df$value > round(max(combined_df$value) * 0.75 + min(combined_df$value) * 0.25, 2), \"black\", \"white\")     districts <- sort(c(district1, district2))      # Call the plot     ggplot(combined_df, aes(x = Var2, y = Var1, fill = value)) +         geom_tile() +         geom_text(aes(label = label, color = text_color), size = 2.5) +         scale_fill_viridis(             name = value,             option = color,         ) +         scale_color_identity() +         facet_wrap(~Matrix) +         coord_fixed() +         theme_bw() +         labs(             title = ifelse(value == \"prob\",                 paste(\"Estimated probabilities in districts:\", districts[1], \"and\", districts[2]),                 paste(\"Standard deviation of estimated probabilities in districts:\", districts[1], \"and\", districts[2])             ),             x = \"Candidates' votes\", y = \"Voters' age range\", fill = value         ) } plot_district(     matrix1 = eim_nav$sd, district1 = \"Navidad\",     matrix2 = eim_apo$sd, district2 = \"Apoquindo\", sd = TRUE )"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/articles/demonstration.html","id":"reduce-estimation-error-using-group-aggregation","dir":"Articles","previous_headings":"","what":"Reduce Estimation Error using Group Aggregation","title":"Demonstration of the package usage","text":"Demographic groups can merged probability estimates lower error. greedy strategy maximizes variability distribution groups across ballot boxes used, ensures standard deviations specific threshold. package provides following function latter: shown output, heuristic finds group aggregation merges first last four age ranges, namely, macro-groups voters aged 18-49, older 50. can evaluate effectiveness grouping comparing mean standard deviation original formulation: possible see aggregated standard deviations visually: can visualize standard deviations estimated probabilities. Navidad aggregated standard deviation proxy method exhaustive algorithm also included package. explores combinations adjacent groups order maximize log-likelihood subject standard deviations given threshold. might require substantial computation time; therefore recommended use default method, “mult”. optimal group aggregation differs slightly one obtained . case, group aggregation consists three age range: 18-29, 30-49, older 70. can visualize standard deviations estimated probabilities. Navidad aggregated standard deviation opt method","code":"eim_nav_proxy <- get_agg_proxy(eim_nav, seed = 6, sd_threshold = 0.03, sd_statistic = \"maximum\") eim_nav_proxy$group_agg ## [1] 4 8 mean(eim_nav$sd) - mean(eim_nav_proxy$sd) ## [1] 0.07432595 plot_matrix <- function(mat, sd = FALSE, y_labels = NULL) {     # Initial configurations     if (!sd) mat <- t(mat)     df <- reshape2::melt(mat)     colnames(df) <- c(\"Row\", \"Column\", \"Value\")     df$Row <- factor(df$Row, levels = rev(sort(unique(df$Row))))     df$Column <- factor(df$Column, levels = sort(unique(df$Column)))     if (!sd) {         df$Label <- sprintf(\"%d\", df$Value)         title_text <- \"Voters distribution\"         x_lab <- \"Ballot Box\"         y_lab <- \"Dem. Group\"         fill_lab <- \"Voters\"         df$text_color <- ifelse(df$Value > 30, \"black\", \"white\")         option <- \"inferno\"         start <- 0.5         limits <- NULL     } else {         df$Label <- sprintf(\"%.3f\", df$Value)         title_text <- \"Standard deviation of estimated probabilities on district: Navidad\"         x_lab <- \"Candidates' votes\"         y_lab <- \"Voters' age range\"         fill_lab <- \"sd\"         df$text_color <- ifelse(df$Value > 0.13, \"black\", \"white\")         option <- \"viridis\"         start <- 0         limits <- c(0, 0.1)     }      # Plot     p <- ggplot(df, aes(x = Column, y = Row, fill = Value)) +         geom_tile() +         geom_text(aes(label = Label, color = text_color), size = 3) +         scale_color_identity() +         scale_fill_viridis_c(option = option, begin = start, limits = limits) +         coord_fixed() +         theme_bw() +         theme(axis.text.y = element_text(size = 7), axis.text.x = element_text(size = 7)) +         labs(             title = title_text,             x = x_lab,             y = y_lab,             fill = fill_lab         )     # Add custom y-axis labels if provided     if (!is.null(y_labels)) {         p <- p + scale_y_discrete(labels = y_labels)     }     p } plot_matrix(eim_nav_proxy$sd, sd = TRUE, y_labels = c(\"X18.49\", \"X50.\")) eim_nav_opt <- get_agg_opt(eim_nav, seed = 0, sd_threshold = 0.03, sd_statistic = \"maximum\") eim_nav_opt$group_agg ## [1] 2 4 8 plot_matrix(eim_nav_opt$sd, sd = TRUE, y_labels = c(\"X18.29\", \"X30.49\", \"X50.\"))"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/articles/demonstration.html","id":"test-difference-between-estimates","dir":"Articles","previous_headings":"","what":"Test difference between estimates","title":"Demonstration of the package usage","text":"relevant question significantly different probability estimates two sets data, two different districts. instance, can compare estimated probabilities district “LO BARNECHEA” “LA GRANJA”, whose voting tendencies expected differ. Lo Barnechea La Granja comparison Wald test can applied component two probability matrix estimates: Conversely, one may examine alternative scenario ballot boxes within given region partitioned equally sized groups. configuration, groups expected exhibit identical probability distributions. Equally sorted districts comparison","code":"eim_gra <- get_eim_chile(\"LA GRANJA\") eim_gra <- run_em(eim_gra) eim_bar <- get_eim_chile(\"LO BARNECHEA\") eim_bar <- run_em(eim_bar)  plot_district(eim_gra$prob, \"La Granja\", eim_bar$prob, \"Lo Barnechea\") comparison2 <- waldtest(     object1 = eim_gra,     object2 = eim_bar,     method = \"mult\",     nboot = 30,     seed = 42, )  round(comparison2$pvals, 3) ##           C1    C2    C3    C4    C5    C6    C7    C8 ## X18.19 0.000 0.000 0.208 0.000 0.533 0.033 0.443 0.878 ## X20.29 0.000 0.000 0.005 0.000 0.000 0.000 0.000 0.823 ## X30.39 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.009 ## X40.49 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 ## X50.59 0.000 0.000 0.000 0.000 0.182 0.000 0.000 0.180 ## X60.69 0.000 0.000 0.001 0.000 0.069 0.000 0.633 0.426 ## X70.79 0.748 0.003 0.000 0.714 0.456 0.923 0.015 0.542 ## X80.   0.992 0.154 0.071 0.747 0.978 0.336 0.326 0.370 eimRM <- get_eim_chile(region = \"METROPOLITANA DE SANTIAGO\")  n <- nrow(eimRM$X) n_train <- floor(n * 0.5) train_indices <- sample(seq_len(n), n_train)  eimRMhalf1 <- eim(X = eimRM$X[train_indices, ], W = eimRM$W[train_indices, ]) eimRMhalf2 <- eim(X = eimRM$X[-train_indices, ], W = eimRM$W[-train_indices, ])  eimRMhalf1 <- run_em(eimRMhalf1) eimRMhalf2 <- run_em(eimRMhalf2)  plot_district(eimRMhalf1$prob, \"Half 1\", eimRMhalf2$prob, \"Half 2\") comparison2 <- waldtest(     object1 = eimRMhalf1,     object2 = eimRMhalf2,     nboot = 10,     seed = 42 )  round(comparison2$pvals, 4) ##            C1     C2     C3     C4     C5     C6     C7     C8 ## X18.19 0.1052 0.1768 0.9525 0.0459 0.0615 0.5609 0.3218 0.3814 ## X20.29 0.0240 0.0584 0.1939 0.1279 0.3934 0.2638 0.8407 0.0418 ## X30.39 0.0173 0.0695 0.8241 0.6153 0.9132 0.9874 0.9704 0.5675 ## X40.49 0.9661 0.7262 0.7254 0.0750 0.0199 0.0098 0.3868 0.2005 ## X50.59 0.7181 0.4912 0.4623 0.5796 0.6915 0.9020 0.4608 0.6597 ## X60.69 0.0684 0.0034 0.6953 0.7221 0.8145 0.5284 0.2461 0.0607 ## X70.79 0.9179 0.7549 0.8788 0.4923 0.2300 0.3565 0.7537 0.0595 ## X80.   0.9998 0.6619 0.4891 0.6027 0.8372 0.9438 0.8549 0.1317"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/articles/demonstration.html","id":"simulating-election-results","dir":"Articles","previous_headings":"","what":"Simulating Election Results","title":"Demonstration of the package usage","text":"possible simulate artificial election get values eim object simulated probability. useful testing package’s performance comparing different methods available. real voting probabilities group candidate can obtained follows: case, can access values since simulation; however, possible working real data. estimated voting probabilities : possible provide specific voting probability candidate group. parameter, lambda, controls heterogeneity voters’ groups across ballot boxes. value lambda = 0 indicates voters randomly assigned ballot boxes; contrast lambda = 1, case voters assigned ballot boxes according demographic group. explained detail documentation simulate_election(). Voters’ heatmap low lambda value following estimated probabilities: side, possible simulate heterogeneous sample Voters’ heatmap high lambda value underlying probabilities","code":"eim_sim <- simulate_election(num_ballots = 15, num_groups = 2, num_candidates = 3, seed = 42) eim_sim ## eim ecological inference model ## Candidates' vote matrix (X) [b x c]: ##      [,1] [,2] [,3] ## [1,]   23   31   46 ## [2,]   22   35   43 ## [3,]   30   20   50 ## [4,]   24   35   41 ## [5,]   24   29   47 ## . ## . ## . ## Group-level voter matrix (W) [b x g]: ##      [,1] [,2] ## [1,]   75   25 ## [2,]   77   23 ## [3,]   73   27 ## [4,]   80   20 ## [5,]   73   27 ## . ## . ## . eim_sim$real_prob ##           [,1]      [,2]      [,3] ## [1,] 0.2588692 0.3615164 0.3796145 ## [2,] 0.2913730 0.1829977 0.5256293 eim_sim <- run_em(eim_sim) eim_sim$prob ##           [,1]      [,2]      [,3] ## [1,] 0.2398303 0.3292528 0.4309169 ## [2,] 0.3014838 0.1827996 0.5157166 input_probability <- matrix(c(0.9, 0.05, 0.05, 0.2, 0.3, 0.5), nrow = 2, byrow = TRUE) input_probability ##      [,1] [,2] [,3] ## [1,]  0.9 0.05 0.05 ## [2,]  0.2 0.30 0.50 eim_sim2 <- simulate_election(     num_ballots = 30, num_groups = 2, num_candidates = 3, seed = 42,     prob = input_probability ) eim_sim2 ## eim ecological inference model ## Candidates' vote matrix (X) [b x c]: ##      [,1] [,2] [,3] ## [1,]   69   14   17 ## [2,]   75   12   13 ## [3,]   68   10   22 ## [4,]   64   16   20 ## [5,]   72   12   16 ## . ## . ## . ## Group-level voter matrix (W) [b x g]: ##      [,1] [,2] ## [1,]   79   21 ## [2,]   78   22 ## [3,]   73   27 ## [4,]   70   30 ## [5,]   73   27 ## . ## . ## . eim_sim2$real_prob ##      [,1] [,2] [,3] ## [1,]  0.9 0.05 0.05 ## [2,]  0.2 0.30 0.50 eim_sim3 <- simulate_election(     num_ballots = 20, num_groups = 4, num_candidates = 2, seed = 42,     lambda = 0.1 ) plot_matrix(eim_sim3$W) run_em(eim_sim3)$prob ##           [,1]      [,2] ## [1,] 0.3686854 0.6313146 ## [2,] 0.6627212 0.3372788 ## [3,] 0.2112870 0.7887130 ## [4,] 0.1805033 0.8194967 eim_sim4 <- simulate_election(     num_ballots = 20, num_groups = 4, num_candidates = 2, seed = 42,     lambda = 0.9 ) plot_matrix(eim_sim4$W) run_em(eim_sim4)$prob ##           [,1]      [,2] ## [1,] 0.3731878 0.6268122 ## [2,] 0.5431853 0.4568147 ## [3,] 0.9365629 0.0634371 ## [4,] 0.8711210 0.1288790"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Charles Thraves. Author. Pablo Ubilla. Author. Daniel Hermosilla. Author, maintainer. Hanson Troy. Contributor, copyright holder.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thraves C, Ubilla P, Hermosilla D (2025). fastei: Methods ”Fast Alternative R x C Ecological Inference Case”. R package version 0.0.0.9, https://danielhermosilla.github.io/ecological-inference-elections/reference/fastei-package.html.","code":"@Manual{,   title = {fastei: Methods for ''A Fast Alternative for the R x C Ecological Inference Case''},   author = {Charles Thraves and Pablo Ubilla and Daniel Hermosilla},   year = {2025},   note = {R package version 0.0.0.9},   url = {https://danielhermosilla.github.io/ecological-inference-elections/reference/fastei-package.html}, }"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs a Bootstrap to Estimate the Standard Deviation of Predicted Probabilities — bootstrap","title":"Runs a Bootstrap to Estimate the Standard Deviation of Predicted Probabilities — bootstrap","text":"function computes Expected-Maximization (EM) algorithm \"nboot\" times. computes standard deviation nboot estimated probability matrices component.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs a Bootstrap to Estimate the Standard Deviation of Predicted Probabilities — bootstrap","text":"","code":"bootstrap(   object = NULL,   X = NULL,   W = NULL,   json_path = NULL,   nboot = 100,   allow_mismatch = TRUE,   seed = NULL,   ... )"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs a Bootstrap to Estimate the Standard Deviation of Predicted Probabilities — bootstrap","text":"object object class eim, can created using eim function. parameter used either () X W matrices (ii) json_path supplied. See Note. X (b x c) matrix representing candidate votes per ballot box. W (b x g) matrix representing group votes per ballot box. json_path path JSON file containing X W fields, stored nested arrays. may contain additional fields attributes, added returned object. nboot Integer specifying many times run EM algorithm. allow_mismatch Boolean, TRUE, allows mismatch voters votes ballot-box, works method \"mvn_cdf\", \"mvn_pdf\", \"mult\" \"mcmc\". FALSE, throws error mismatch. default TRUE. seed optional integer indicating random seed randomized algorithms. argument applicable initial_prob = \"random\" method either \"mcmc\" \"mvn_cdf\". Aditionally, sets random draws ballot boxes. ... Additional arguments passed run_em function execute EM algorithm.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/bootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs a Bootstrap to Estimate the Standard Deviation of Predicted Probabilities — bootstrap","text":"Returns eim object sd field containing estimated standard deviations probabilities amount iterations made. eim object provided, attributes (see run_em) retained returned object.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/bootstrap.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Runs a Bootstrap to Estimate the Standard Deviation of Predicted Probabilities — bootstrap","text":"function can executed using one three mutually exclusive approaches: providing existing eim object. supplying input matrices (X W) directly. specifying JSON file (json_path) containing matrices. input methods mutually exclusive, meaning must provide exactly one options. Attempting provide one none inputs result error. called eim object, function updates object computed results. eim object provided, function create one internally using either supplied matrices data JSON file executing algorithm.","code":""},{"path":[]},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Runs a Bootstrap to Estimate the Standard Deviation of Predicted Probabilities — bootstrap","text":"","code":"# \\donttest{ # Example 1: Using an 'eim' object directly simulations <- simulate_election(     num_ballots = 200,     num_candidates = 5,     num_groups = 3, )  model <- eim(X = simulations$X, W = simulations$W)  model <- bootstrap(     object = model,     nboot = 30,     method = \"mult\",     maxiter = 500,     verbose = FALSE, )  # Access standard deviation throughout 'model' print(model$sd) #>            [,1]       [,2]       [,3]       [,4]       [,5] #> [1,] 0.00236761 0.00547484 0.00516216 0.00351710 0.00649439 #> [2,] 0.00543634 0.00429292 0.00345472 0.00872649 0.00760032 #> [3,] 0.00423258 0.00347167 0.00714803 0.00580877 0.00709216   # Example 2: Providing 'X' and 'W' matrices directly model <- bootstrap(     X = simulations$X,     W = simulations$W,     nboot = 15,     method = \"mvn_pdf\",     maxiter = 100,     maxtime = 5,     param_threshold = 0.01,     allow_mismatch = FALSE )  print(model$sd) #>            [,1]       [,2]       [,3]       [,4]       [,5] #> [1,] 0.00319174 0.00895574 0.00978115 0.00281881 0.00898950 #> [2,] 0.00541988 0.00344511 0.00562368 0.01017691 0.00783915 #> [3,] 0.00337515 0.00279437 0.00810703 0.00584907 0.01051026 # }  # Example 3: Using a JSON file as input  if (FALSE) { # \\dontrun{ model <- bootstrap(     json_path = \"path/to/election_data.json\",     nboot = 70,     method = \"mult\", )  print(model$sd) } # }"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/chile_election_2021.html","id":null,"dir":"Reference","previous_headings":"","what":"Chilean 2021 First Round Presidential Election — chile_election_2021","title":"Chilean 2021 First Round Presidential Election — chile_election_2021","text":"dataset contains results first round 2021 Chilean presidential elections. provides 9 possible voting options (7 candidates, blank, null). ballot-box identified id (BALLOT.BOX) electoral circumscription (ELECTORAL.DISTRICT). Additionally, provides demographic information voters' age range ballot box.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/chile_election_2021.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chilean 2021 First Round Presidential Election — chile_election_2021","text":"","code":"data(\"chile_election_2021\")"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/chile_election_2021.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Chilean 2021 First Round Presidential Election — chile_election_2021","text":"data frame 46,639 rows 14 variables: REGION region ELECTORAL.DISTRICT ELECTORAL.DISTRICT electoral circumscription ballot box. BALLOT.BOX identifier ballot box within ELECTORAL.DISTRICT. C1 number votes cast candidate Gabriel Boric. C2 number votes cast candidate José Antonio Kast. C3 number votes cast candidate Yasna Provoste. C4 number votes cast candidate Sebastián Sichel. C5 number votes cast candidate Eduardo Artés. C6 number votes cast candidate Marco Enríquez-Ominami. C7 number votes cast candidate Franco Parisi. BLANK.VOTES number blank votes. NULL.VOTES number null votes. X18.19 Number voters aged 18–19. X20.29 Number voters aged 20–29. X30.39 Number voters aged 30–39. X40.49 Number voters aged 40–49. X50.59 Number voters aged 50–59. X60.69 Number voters aged 60–69. X70.79 Number voters aged 70–79. X80. Number voters aged 80 older. MISMATCH Boolean takes value TRUE ballot-box mismatch total number votes total number voters. case, value FALSE. F Number female voters ballot box. M Number male voters ballot box.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/chile_election_2021.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Chilean 2021 First Round Presidential Election — chile_election_2021","text":"Chilean Electoral Service (SERVEL)","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/chile_election_2021.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chilean 2021 First Round Presidential Election — chile_election_2021","text":"","code":"data(\"chile_election_2021\") head(chile_election_2021) #>           REGION ELECTORAL.DISTRICT BALLOT.BOX C1 C2 C3 C4 C5 C6 C7 BLANK.VOTES #> 1 DE ANTOFAGASTA  ANTOFAGASTA NORTE        126 12 22  3  4  1  5 71           0 #> 2 DE ANTOFAGASTA  ANTOFAGASTA NORTE        127 11 25  4  4  0  6 70           1 #> 3 DE ANTOFAGASTA  ANTOFAGASTA NORTE        128 16 23  3  3  1  5 70           1 #> 4 DE ANTOFAGASTA  ANTOFAGASTA NORTE        129 10 22  4  4  0  2 75           0 #> 5 DE ANTOFAGASTA  ANTOFAGASTA NORTE        130 16 23  4  3  1  3 76           0 #> 6 DE ANTOFAGASTA  ANTOFAGASTA NORTE        131 22 25  3  4  3  2 62           0 #>   NULL.VOTES X18.19 X20.29 X30.39 X40.49 X50.59 X60.69 X70.79 X80. MISMATCH   M #> 1          0      1      7    103      3      0      3      1    0    FALSE 107 #> 2          0      2     10     98      6      4      1      0    0    FALSE 106 #> 3          2      3      5    111      2      2      0      1    0    FALSE 116 #> 4          2      2      2    103      7      3      2      0    0    FALSE 110 #> 5          1      4      9    112      1      2      0      0    0     TRUE 116 #> 6          3      3      8    103      4      3      1      0    2    FALSE 111 #>    F #> 1 11 #> 2 15 #> 3  8 #> 4  9 #> 5 12 #> 6 13"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/eim.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 Object for the Expectation-Maximization Algorithm — eim","title":"S3 Object for the Expectation-Maximization Algorithm — eim","text":"constructor creates eim S3 object, either using matrices X W directly reading JSON file. eim object encapsulates data (votes candidates demographic groups) required underlying Expectation-Maximization algorithm.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/eim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 Object for the Expectation-Maximization Algorithm — eim","text":"","code":"eim(X = NULL, W = NULL, json_path = NULL)"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/eim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 Object for the Expectation-Maximization Algorithm — eim","text":"X (b x c) matrix representing candidate votes per ballot box. W (b x g) matrix representing group votes per ballot box. json_path path JSON file containing X W fields, stored nested arrays. may contain additional fields attributes, added returned object.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/eim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 Object for the Expectation-Maximization Algorithm — eim","text":"list class eim containing: X candidate votes matrix (b x c). W group votes matrix (b x g).","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/eim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"S3 Object for the Expectation-Maximization Algorithm — eim","text":"X W directly supplied, must match dimensions ballot boxes (b). Alternatively, json_path provided, function expects JSON file contain elements named \"X\" \"W\" top-level object. two approaches mutually exclusable, yielding error otherwise. Internally, function also initializes corresponding instance within low-level (C-based) API, ensuring data correctly registered processing EM algorithm.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/eim.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"S3 Object for the Expectation-Maximization Algorithm — eim","text":"way generate synthetic data X W using simulate_election function. See Example 2 .","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/eim.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"S3 Object for the Expectation-Maximization Algorithm — eim","text":"addition constructor, \"eim\" class provides several S3 methods common operations. methods fully documented, others ommited due straightfoward implementantion. available methods : run_em - Runs EM algorithm. bootstrap - Estimates standard deviation. save_eim - Saves object file. get_agg_proxy - Estimates ideal group aggregation given standard deviations. get_agg_opt - Estimates ideal group aggregation among combinations, given log-likelihood. print.eim - Print info object. summary.eim - Summarize object. .matrix.eim - Returns probability matrix. logLik.eim - Returns final log-likelihood.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/eim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 Object for the Expectation-Maximization Algorithm — eim","text":"","code":"# Example 1: Create an eim object from a JSON file if (FALSE) { # \\dontrun{ model1 <- eim(json_path = \"path/to/file.json\") } # }  # Example 2: Use simulate_election with optional parameters, then create an eim object # from matrices  # Simulate data for 500 ballot boxes, 4 candidates and 5 groups sim_result <- simulate_election(     num_ballots = 500,     num_candidates = 3,     num_groups = 5,     group_proportions = c(0.2, 0.2, 0.4, 0.1, 0.1) )  model2 <- eim(X = sim_result$X, W = sim_result$W)  # Example 3: Create an object from a user defined matrix with 8 ballot boxes, # 2 candidates and 7 groups.  x_mat <- matrix(c(     57, 90,     60, 84,     43, 102,     72, 71,     63, 94,     52, 80,     60, 72,     54, 77 ), nrow = 8, ncol = 2, byrow = TRUE)  w_mat <- matrix(c(     10, 15, 25, 21, 10, 40, 26,     11, 21, 37, 32, 8, 23, 12,     17, 12, 43, 27, 12, 19, 15,     20, 18, 25, 15, 22, 17, 26,     21, 19, 27, 16, 23, 22, 29,     18, 16, 20, 14, 19, 22, 23,     10, 15, 21, 18, 20, 16, 32,     12, 17, 19, 22, 15, 18, 28 ), nrow = 8, ncol = 7, byrow = TRUE)  model3 <- eim(X = x_mat, W = w_mat)"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/fastei-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fastei: Methods for ","title":"fastei: Methods for ","text":"Package implements methods Thraves, C.,Ubilla, P. Hermosilla, D. (2024): \"Fast Ecological Inference Algorithm R×C Case\".","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/fastei-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"fastei: Methods for ","text":"Includes method (run_em) solve R\\(\\times\\)C Ecological Inference problem non-parametric case using EM algorithm different approximation methods E-Step. standard deviation estimated probabilities can computed using bootstrapping (bootstrap). also provides function generates synthetic election data (simulate_election) function imports real election data (chile_election_2021) Chilean first-round presidential election 2021. setting documentation presents Ecological Inference problem election context set ballot-boxes observe () votes obtained candidate (ii) number voters demographic group (example, can defined age ranges sex). See Thraves, C.,Ubilla, P. Hermosilla, D. (2024): \"Fast Ecological Inference Algorithm R×C Case\". methods compute conditional probabilities E-Step included package following: Markov Chain Monte Carlo (mcmc): Performs MCMC sample vote outcomes ballot-box consistent observed data. sample used estimate conditional probability E-Step. Multivariate Normal PDF (mvn_pdf): Uses PDF Multivariate Normal approximate conditional probability. Multivariate Normal CDF (mvn_cdf): Uses CDF Multivariate Normal approximate conditional probability. Multinomial (mult): single Multinomial used approximate sum Multinomial distributions. Exact (exact): Solves E-Step exactly using Total Probability Law, requires enumerating exponential number terms. average, Multinomial method efficient precise. precision matches Exact method. documentation uses following notation: b: number ballot-boxes. g: number demographic groups. c: number candidates. : number aggregated macro-groups. learn fastei, please consult available vignettes:","code":"browseVignettes(\"fastei\")"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/fastei-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"fastei: Methods for ","text":"Thraves, C., Ubilla, P Hermosilla D. (2024): \"Fast Ecological Inference Algorithm R×C Case\".","code":""},{"path":[]},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/fastei-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fastei: Methods for ","text":"Maintainer: Daniel Hermosilla daniel.hermosilla.r@ug.uchile.cl Authors: Charles Thraves Pablo Ubilla contributors: Hanson Troy [contributor, copyright holder]","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs the EM algorithm over all possible group aggregating, returning the one with higher likelihood while constraining the standard deviation of the probabilities. — get_agg_opt","title":"Runs the EM algorithm over all possible group aggregating, returning the one with higher likelihood while constraining the standard deviation of the probabilities. — get_agg_opt","text":"function estimates voting probabilities (computed using run_em) trying group aggregations (adjacent groups), choosing one achieves higher likelihood long standard deviation (computed using bootstrap) estimated probabilities given threshold. See Details informacion adjacent groups.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs the EM algorithm over all possible group aggregating, returning the one with higher likelihood while constraining the standard deviation of the probabilities. — get_agg_opt","text":"","code":"get_agg_opt(   object = NULL,   X = NULL,   W = NULL,   json_path = NULL,   sd_statistic = \"maximum\",   sd_threshold = 0.05,   method = \"mult\",   nboot = 100,   allow_mismatch = TRUE,   seed = NULL,   ... )"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_opt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs the EM algorithm over all possible group aggregating, returning the one with higher likelihood while constraining the standard deviation of the probabilities. — get_agg_opt","text":"object object class eim, can created using eim function. parameter used either () X W matrices (ii) json_path supplied. See Note run_em. X (b x c) matrix representing candidate votes per ballot box. W (b x g) matrix representing group votes per ballot box. json_path path JSON file containing X W fields, stored nested arrays. may contain additional fields attributes, added returned object. sd_statistic String indicates statistic standard deviation (g x c) matrix stopping condition, .e., algorithm stops statistic threshold. can take value maximum, case computes maximum standard deviation matrix, average, case computes average. sd_threshold Numeric value use threshold statistic (sc_statistic) standard deviation estimated probabilities. Defaults 0.05. method optional string specifying method used estimating E-step. Valid options : mult: default method, using single sum Multinomial distributions. mvn_cdf: Uses Multivariate Normal CDF distribution approximate conditional probability. mvn_pdf: Uses Multivariate Normal PDF distribution approximate conditional probability. mcmc: Uses MCMC sample vote outcomes. used estimate conditional probability E-step. exact: Solves E-step using Total Probability Law. nboot Integer specifying many times run EM algorithm. allow_mismatch Boolean, TRUE, allows mismatch voters votes ballot-box, works method \"mvn_cdf\", \"mvn_pdf\", \"mult\" \"mcmc\". FALSE, throws error mismatch. default TRUE. seed optional integer indicating random seed randomized algorithms. argument applicable initial_prob = \"random\" method either \"mcmc\" \"mvn_cdf\". Aditionally, sets random draws ballot boxes. ... Additional arguments passed run_em function execute EM algorithm.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_opt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs the EM algorithm over all possible group aggregating, returning the one with higher likelihood while constraining the standard deviation of the probabilities. — get_agg_opt","text":"returns eim object attributes output run_em, plus attributes: sd: (x c) matrix standard deviation estimated probabilities computed bootstrapping. Note denotes number macro-groups resulting group aggregation, 1 g. nboot: Number samples used bootstrap method. seed: Random seed used (specified). sd_statistic: statistic used input. sd_threshold: threshold used input. group_agg: Vector resulting group aggregation. See Examples details. Additionally, create W_agg attribute aggregated groups, along attributes corresponding running run_em aggregated groups.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_opt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Runs the EM algorithm over all possible group aggregating, returning the one with higher likelihood while constraining the standard deviation of the probabilities. — get_agg_opt","text":"Groups consecutive column indices matrix W considered adjacent. example, consider following seven groups defined voters' age ranges: 20-29, 30-39, 40-49, 50-59, 60-69, 70-79, 80+. possible group aggregation can macro-group composed three following age ranges: 20-39, 40-59, 60+. Since multiple group aggregations, method evaluates possible group aggregations (merging adjacent groups).","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_opt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Runs the EM algorithm over all possible group aggregating, returning the one with higher likelihood while constraining the standard deviation of the probabilities. — get_agg_opt","text":"","code":"# Example 1: Using a simulated instance simulations <- simulate_election(     num_ballots = 20,     num_candidates = 3,     num_groups = 8,     seed = 42 )  result <- get_agg_opt(     X = simulations$X,     W = simulations$W,     sd_threshold = 0.05,     seed = 42 )  result$group_agg # c(3,8) #> [1] 3 8 # This means that the resulting group aggregation consists of # two macro-groups: one that includes the original groups 1, 2, and 3; # the remaining one with groups 4, 5, 6, 7 and 8.  # \\donttest{ # Example 2: Getting an unfeasible result result2 <- get_agg_opt(     X = simulations$X,     W = simulations$W,     sd_threshold = 0.001 )  result2$group_agg # Error #> NULL result2$X # Input candidates' vote matrix #>       [,1] [,2] [,3] #>  [1,]   24   41   35 #>  [2,]   30   37   33 #>  [3,]   28   41   31 #>  [4,]   21   46   33 #>  [5,]   29   42   29 #>  [6,]   19   51   30 #>  [7,]   21   52   27 #>  [8,]   29   46   25 #>  [9,]   26   47   27 #> [10,]   21   51   28 #> [11,]   55   25   20 #> [12,]   52   26   22 #> [13,]   46   24   30 #> [14,]   23   33   44 #> [15,]   22   34   44 #> [16,]   11   70   19 #> [17,]   16   62   22 #> [18,]   34   52   14 #> [19,]   30   49   21 #> [20,]   42   42   16 result2$W # Input group-level voter matrix #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #>  [1,]   54    6    4    6    5    8   13    4 #>  [2,]   60    4   11    7    8    4    4    2 #>  [3,]   35   27    8    6    9    6    3    6 #>  [4,]    7   64    3    5    6    8    3    4 #>  [5,]    4   56    6    4    7    8    8    7 #>  [6,]    3    8   54    4   11    5    9    6 #>  [7,]    7    8   51    9    7    7    5    6 #>  [8,]    5   11   33   28    8    4    5    6 #>  [9,]    5    4    4   62    5   11    3    6 #> [10,]   13    4   13   47    6    3    6    8 #> [11,]    6    4    4    9   59    6    6    6 #> [12,]    4    7    7    9   56    5    8    4 #> [13,]    5    8    8    7   29   29    5    9 #> [14,]   14    1    7   10    3   61    4    0 #> [15,]    1    6    8    8    6   56    5   10 #> [16,]    6    9    7    3    4    3   62    6 #> [17,]    8    5    3    6    5    9   61    3 #> [18,]    2    5    8    4    7    7   28   39 #> [19,]    4    7    4    6    4    9    6   60 #> [20,]    7    6    7   10    5    1    6   58 # }"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_proxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs the EM algorithm aggregating adjacent groups, maximizing the variability of macro-group allocation in ballot boxes. — get_agg_proxy","title":"Runs the EM algorithm aggregating adjacent groups, maximizing the variability of macro-group allocation in ballot boxes. — get_agg_proxy","text":"function estimates voting probabilities (computed using run_em) aggregating adjacent groups estimated probabilities' standard deviation (computed using bootstrap) given threshold. See Details information.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_proxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs the EM algorithm aggregating adjacent groups, maximizing the variability of macro-group allocation in ballot boxes. — get_agg_proxy","text":"","code":"get_agg_proxy(   object = NULL,   X = NULL,   W = NULL,   json_path = NULL,   sd_statistic = \"maximum\",   sd_threshold = 0.05,   method = \"mult\",   feasible = TRUE,   nboot = 100,   allow_mismatch = TRUE,   seed = NULL,   ... )"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_proxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs the EM algorithm aggregating adjacent groups, maximizing the variability of macro-group allocation in ballot boxes. — get_agg_proxy","text":"object object class eim, can created using eim function. parameter used either () X W matrices (ii) json_path supplied. See Note run_em. X (b x c) matrix representing candidate votes per ballot box. W (b x g) matrix representing group votes per ballot box. json_path path JSON file containing X W fields, stored nested arrays. may contain additional fields attributes, added returned object. sd_statistic String indicates statistic standard deviation (g x c) matrix stopping condition, .e., algorithm stops statistic threshold. can take value maximum, case computes maximum standard deviation matrix, average, case computes average. sd_threshold Numeric value use threshold statistic (sc_statistic) standard deviation estimated probabilities. Defaults 0.05. method optional string specifying method used estimating E-step. Valid options : mult: default method, using single sum Multinomial distributions. mvn_cdf: Uses Multivariate Normal CDF distribution approximate conditional probability. mvn_pdf: Uses Multivariate Normal PDF distribution approximate conditional probability. mcmc: Uses MCMC sample vote outcomes. used estimate conditional probability E-step. exact: Solves E-step using Total Probability Law. feasible Logical indicating whether returned matrix must strictly satisfy sd_threshold. TRUE, output returned method find group aggregation whose standard deviation statistic threshold. FALSE latter holds, returns group aggregation obtained DP lowest standard deviation statistic. See Details information. Default TRUE. nboot Integer specifying many times run EM algorithm. allow_mismatch Boolean, TRUE, allows mismatch voters votes ballot-box, works method \"mvn_cdf\", \"mvn_pdf\", \"mult\" \"mcmc\". FALSE, throws error mismatch. default TRUE. seed optional integer indicating random seed randomized algorithms. argument applicable initial_prob = \"random\" method either \"mcmc\" \"mvn_cdf\". Aditionally, sets random draws ballot boxes. ... Additional arguments passed run_em function execute EM algorithm.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_proxy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs the EM algorithm aggregating adjacent groups, maximizing the variability of macro-group allocation in ballot boxes. — get_agg_proxy","text":"returns eim object attributes output run_em, plus attributes: sd: (x c) matrix standard deviation estimated probabilities computed bootstrapping. Note denotes number macro-groups resulting group aggregation, 1 g. nboot: Number samples used bootstrap method. seed: Random seed used (specified). sd_statistic: statistic used input. sd_threshold: threshold used input. is_feasible:  Boolean indicating whether statistic standard deviation matrix threshold. group_agg: Vector resulting group aggregation. See Examples details. Additionally, create W_agg attribute aggregated groups, along attributes corresponding running run_em aggregated groups.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_proxy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Runs the EM algorithm aggregating adjacent groups, maximizing the variability of macro-group allocation in ballot boxes. — get_agg_proxy","text":"Groups need order relation adjacent groups can merged. Groups consecutive column indices matrix W considered adjacent. example, consider following seven groups defined voters' age ranges: 20-29, 30-39, 40-49, 50-59, 60-69, 70-79, 80+. possible group aggregation can macro-group composed three following age ranges: 20-39, 40-59, 60+. Since multiple group aggregations, even fixed number macro-groups, Dynamic Program (DP) mechanism used find group aggregation maximizes sum standard deviation macro-groups proportions among ballot boxes specific number macro-groups. group aggregation standard deviation statistic meets threshold condition, NULL returned. find best group aggregation, function runs DP iteratively, starting groups (case trivial since group aggregation macro-groups match exactly original groups). standard deviation statistic (sd_statistic) threshold (sd_threshold), stops. Otherwise, runs DP number macro-groups one unit less original number macro-groups. standard deviation statistic threshold, stops. continues either algorithm stops, group aggregation obtained DP satisfies threshold condition. former holds, last group aggregation obtained (stopping) returned; latter holds, output returned unless user sets input parameter feasible=FALSE, case returns group aggregation least standard deviation statistic, among group-aggregations obtained DP.","code":""},{"path":[]},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_proxy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Runs the EM algorithm aggregating adjacent groups, maximizing the variability of macro-group allocation in ballot boxes. — get_agg_proxy","text":"","code":"# Example 1: Using a simulated instance simulations <- simulate_election(     num_ballots = 400,     num_candidates = 3,     num_groups = 6,     group_proportions = c(0.4, 0.1, 0.1, 0.1, 0.2, 0.1),     lambda = 0.7,     seed = 42 )  result <- get_agg_proxy(     X = simulations$X,     W = simulations$W,     sd_threshold = 0.015,     seed = 42 )  result$group_agg # c(2 6) #> [1] 2 6 # This means that the resulting group aggregation is conformed by # two macro-groups: one that has the original groups 1 and 2; and # a second that has the original groups 3, 4, 5, and 6.  # Example 2: Using the chilean election results data(chile_election_2021)  niebla_df <- chile_election_2021[chile_election_2021$ELECTORAL.DISTRICT == \"NIEBLA\", ]  # Create the X matrix with selected columns X <- as.matrix(niebla_df[, c(\"C1\", \"C2\", \"C3\", \"C4\", \"C5\", \"C6\", \"C7\")])  # Create the W matrix with selected columns W <- as.matrix(niebla_df[, c(     \"X18.19\", \"X20.29\",     \"X30.39\", \"X40.49\",     \"X50.59\", \"X60.69\",     \"X70.79\", \"X80.\" )])  solution <- get_agg_proxy(     X = X, W = W,     allow_mismatch = TRUE, sd_threshold = 0.03,     sd_statistic = \"average\", seed = 42 )  solution$group_agg # c(3, 4, 5, 6, 8) #> [1] 3 4 5 6 8 # This means that the resulting group aggregation consists of # five macro-groups: one that includes the original groups 1, 2, and 3; # three singleton groups (4, 5, and 6); and one macro-group that includes groups 7 and 8."},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_eim_chile.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts voting and demographic data matrices for a given electoral district in Chile. — get_eim_chile","title":"Extracts voting and demographic data matrices for a given electoral district in Chile. — get_eim_chile","text":"function retrieves voting results demographic covariates given electoral district 2021 Chilean election dataset included package. function returns eim object can directly used run_em estimation functions.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_eim_chile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts voting and demographic data matrices for a given electoral district in Chile. — get_eim_chile","text":"","code":"get_eim_chile(   elect_district = NULL,   region = NULL,   merge_blank_null = TRUE,   remove_mismatch = FALSE,   use_sex = FALSE )"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_eim_chile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts voting and demographic data matrices for a given electoral district in Chile. — get_eim_chile","text":"elect_district string indicating name electoral district extract (e.g., \"NIEBLA\"). See Note. region string indicating name region extract (e.g, \"DE TARAPACA\"). See Note. merge_blank_null Logical indicating whether blank null votes merged single column. Defaults TRUE. remove_mismatch Logical indicating whether remove ballot boxes mismatched vote totals (MISMATCH == TRUE). Defaults FALSE. use_sex Logical indicating whether use sex voters instead age ranges. Defaults FALSE.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_eim_chile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts voting and demographic data matrices for a given electoral district in Chile. — get_eim_chile","text":"eim object following attributes: X: matrix (b x c) number votes per candidate (including column blank + null votes merge_blank_null = TRUE). W: matrix (b x g) number voters per group (e.g., age ranges) ballot box. object can passed functions like run_em get_agg_proxy estimation group aggregation. See Example.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_eim_chile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extracts voting and demographic data matrices for a given electoral district in Chile. — get_eim_chile","text":"function builds X matrix using number votes per candidate, W matrix using number voters demographic group (e.g., age ranges). Optionally, blank null votes can merged single additional column (considered another candidate). Additionally, ballot boxes number votes match number registered voters (.e., MISMATCH == TRUE) can excluded dataset setting remove_mismatch = TRUE.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_eim_chile.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extracts voting and demographic data matrices for a given electoral district in Chile. — get_eim_chile","text":"one parameter accepted among elect_district region. either parameters given, return error. neither two inputs supplied, return eim object aggregation corresponding whole dataset. see electoral districts regions names, see function chile_election_2021.","code":""},{"path":[]},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_eim_chile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts voting and demographic data matrices for a given electoral district in Chile. — get_eim_chile","text":"","code":"# Load data and create an eim object for the electoral district of \"NIEBLA\" eim_obj <- get_eim_chile(elect_district = \"NIEBLA\", remove_mismatch = FALSE)  # Use it to run the EM algorithm result <- run_em(eim_obj, allow_mismatch = TRUE)  # Use it with group aggregation agg_result <- get_agg_proxy(     object = eim_obj,     sd_threshold = 0.05,     allow_mismatch = TRUE,     seed = 123 )  agg_result$group_agg #> [1] 4 8"},{"path":[]},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/run_em.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Expected-Maximization Algorithm — run_em","text":"","code":"run_em(   object = NULL,   X = NULL,   W = NULL,   json_path = NULL,   method = \"mult\",   initial_prob = \"group_proportional\",   allow_mismatch = TRUE,   maxiter = 1000,   maxtime = 3600,   param_threshold = 0.001,   ll_threshold = as.double(-Inf),   seed = NULL,   verbose = FALSE,   group_agg = NULL,   mcmc_samples = 1000,   mcmc_stepsize = 3000,   mvncdf_method = \"genz\",   mvncdf_error = 0.00001,   mvncdf_samples = 5000,   metropolis_iter = 5,   ... )"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/run_em.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Expected-Maximization Algorithm — run_em","text":"object object class eim, can created using eim function. parameter used either () X W matrices (ii) json_path supplied. See Note. X (b x c) matrix representing candidate votes per ballot box. W (b x g) matrix representing group votes per ballot box. json_path path JSON file containing X W fields, stored nested arrays. may contain additional fields attributes, added returned object. method optional string specifying method used estimating E-step. Valid options : mult: default method, using single sum Multinomial distributions. mvn_cdf: Uses Multivariate Normal CDF distribution approximate conditional probability. mvn_pdf: Uses Multivariate Normal PDF distribution approximate conditional probability. mcmc: Uses MCMC sample vote outcomes. used estimate conditional probability E-step. metropolis: Uses Metropolis-Hastings algorithm sample vote outcomes. used estimate conditional probability E-step. exact: Solves E-step using Total Probability Law. detailed description method, see fastei-package References. initial_prob optional string specifying method used obtain initial probability. Accepted values : uniform: Assigns equal probability every candidate within group. proportional: Assigns probabilities group based proportion candidates votes. group_proportional: Computes probability matrix taking account group candidate proportions. default method. random: Use randomized values fill probability matrix. allow_mismatch Boolean, TRUE, allows mismatch voters votes ballot-box, works method \"mvn_cdf\", \"mvn_pdf\", \"mult\" \"mcmc\". FALSE, throws error mismatch. default TRUE. maxiter optional integer indicating maximum number EM iterations. default value 1000. maxtime optional numeric specifying maximum running time (seconds) algorithm. checked every iteration EM algorithm. default value 3600, corresponds hour. param_threshold optional numeric value indicating minimum difference consecutive probability values required stop iterating. default value 0.001. Note algorithm stop either ll_threshold param_threshold accomplished. ll_threshold optional numeric value indicating minimum difference consecutive log-likelihood values stop iterating. default value inf, essentially deactivating threshold. Note algorithm stop either ll_threshold param_threshold accomplished. seed optional integer indicating random seed randomized algorithms. argument applicable initial_prob = \"random\" method either \"mcmc\" \"mvn_cdf\". verbose optional boolean indicating whether print informational messages EM iterations. default value FALSE. group_agg optional vector increasing integers 1 number columns W, specifying aggregate groups W running EM algorithm. value represents highest column index included aggregated group. example, W four columns, group_agg = c(2, 4) indicates columns 1 2 combined one group, columns 3 4 another. Defaults NULL, case group aggregation performed. mcmc_samples optional integer indicating number samples generate MCMC method. parameter relevant method = \"mcmc\". default value 1000. mcmc_stepsize optional integer specifying step size mcmc algorithm. parameter applicable method = \"mcmc\" ignored otherwise. default value 3000. mvncdf_method optional string specifying method used estimate mvn_cdf method via Monte Carlo simulation. Accepted values genz genz2, genz set default. parameter applicable method = \"mvn_cdf\". See References details. mvncdf_error optional numeric value defining error threshold Monte Carlo simulation estimating mvn_cdf method. default value 1e-6. parameter relevant method = \"mvn_cdf\". mvncdf_samples optional integer specifying number Monte Carlo samples mvn_cdf method. default value 5000. argument applicable method = \"mvn_cdf\". metropolis_iter optional integer specifying amount iterations run Metropolis-Hastings algorithm metropolis method. default value 5. argument applicable method = \"metropolis\". ... Added compability","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/run_em.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Expected-Maximization Algorithm — run_em","text":"function returns eim object function arguments following attributes: prob estimated probability matrix (g x c). cond_prob (g x c x b) 3d-array probability ballot-box voter group voted candidate, given observed outcome particular ballot-box. expected_outcome (g x c x b) 3d-array expected votes cast ballot box.} \\item{logLik}{log-likelihood value last iteration.} \\item{iterations}{total number iterations performed EM algorithm.} \\item{time}{total execution time algorithm seconds.} \\item{status}{ final status ID algorithm upon completion: \\itemize{ \\item \\code{0}: Converged \\item \\code{1}: Maximum time reached. \\item \\code{2}: Maximum iterations reached. } } \\item{message}{finishing status displayed message, matching status ID value.} \\item{method}{method estimating conditional probability E-step.} } Aditionally, create mcmc_samplesandmcmc_stepsizeparameters specifiedmethod = \"mcmc\", mvncdf_method, mvncdf_errorandmvncdf_samplesifmethod = \"mvn_cdf\"`. Also, eim object supplied created function simulate_election, also returns real probability name real_prob. See simulate_election. group_agg different NULL, two values returned: W_agg (b x ) matrix number voters aggregated group o ballot-box, group_agg input vector. providing existing eim object. supplying input matrices (X W) directly. specifying JSON file (json_path) containing matrices.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/save_eim.html","id":null,"dir":"Reference","previous_headings":"","what":"Save an eim object to a file — save_eim","title":"Save an eim object to a file — save_eim","text":"function saves eim object specified file format. Supported formats RDS, JSON, CSV. function dynamically extracts saves available attributes exporting JSON. prob field exists, saved using CSV; otherwise, yields error.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/save_eim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save an eim object to a file — save_eim","text":"","code":"save_eim(object, filename, ...)"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/save_eim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save an eim object to a file — save_eim","text":"object eim object. filename character string specifying file path, including desired file extension (.rds, .json, .csv). ... Additional arguments (currently unused included compatibility).","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/save_eim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save an eim object to a file — save_eim","text":"function return anything explicitly saves object specified file.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/save_eim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save an eim object to a file — save_eim","text":"file extension RDS, entire object saved using saveRDS(). file extension JSON, available attributes object stored JSON format. file extension CSV: object contains prob field, field saved CSV. Otherwise, returns error.","code":""},{"path":[]},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/save_eim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save an eim object to a file — save_eim","text":"","code":"# \\donttest{ model <- eim(X = matrix(1:9, 3, 3), W = matrix(1:9, 3, 3))  model <- run_em(model)  td <- tempdir() out_rds <- file.path(td, \"model_results.rds\") out_json <- file.path(td, \"model_results.json\") out_csv <- file.path(td, \"model_results.csv\")  # Save as RDS save_eim(model, filename = out_rds) #> Results saved as RDS: /var/folders/2z/n3hh9hls78sfgxccsssr10bc0000gn/T//RtmpFqPxyD/model_results.rds  # Save as JSON save_eim(model, filename = out_json) #> Results saved as JSON: /var/folders/2z/n3hh9hls78sfgxccsssr10bc0000gn/T//RtmpFqPxyD/model_results.json  # Save as CSV save_eim(model, filename = out_csv) #> Probability matrix saved as CSV: /var/folders/2z/n3hh9hls78sfgxccsssr10bc0000gn/T//RtmpFqPxyD/model_results.csv  # Remove the files files <- c(out_rds, out_json, out_csv) file.remove(files) #> [1] TRUE TRUE TRUE # }"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/simulate_election.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate an Election — simulate_election","title":"Simulate an Election — simulate_election","text":"function simulates election creating matrices representing candidate votes (X) voters' demographic group (W) across specified number ballot-boxes. either () receives input (ii) generates probability matrix (prob), indicating likely demographic group vote candidate. default, number voters per ballot box (ballot_voters) set vector 100 length num_ballots. can optionally override providing custom vector. Optional parameters available control distribution votes: group_proportions: vector length num_groups specifying overall proportion demographic group. Entries must sum one non-negative. prob: user-supplied probability matrix dimension (num_groups \\(\\times\\) num_candidates). provided, matrix used directly. Otherwise, voting probabilities group drawn Dirichlet distribution.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/simulate_election.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate an Election — simulate_election","text":"","code":"simulate_election(   num_ballots,   num_candidates,   num_groups,   ballot_voters = rep(100, num_ballots),   lambda = 0.5,   seed = NULL,   group_proportions = rep(1/num_groups, num_groups),   prob = NULL )"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/simulate_election.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate an Election — simulate_election","text":"num_ballots Number ballot boxes (b). num_candidates Number candidates (c). num_groups Number demographic groups (g). ballot_voters vector length num_ballots representing number voters per ballot box. Defaults rep(100, num_ballots). lambda numeric value 0 1 represents fraction voters randomly assigned ballot-boxes. remaining voters assigned sequentially according demographic group. lambda = 0: assignment voters ballot-boxes fully sequential terms demographic group. leads high heterogeneity voters' groups across ballot-boxes. lambda = 1: assignment voters ballot-boxes fully random. leads low heterogeneity voters' group across ballot-boxes. Default value set 0.5. See Shuffling Mechanish details. seed provided, overrides current global seed. Defaults NULL. group_proportions Optional. vector length num_groups indicates fraction voters belong group. Default groups size. prob Optional. user-supplied probability matrix dimension (g x c). provided, matrix used underlying voting probability distribution. supplied, row sampled Dirichlet distribution parameter set one.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/simulate_election.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate an Election — simulate_election","text":"eim object three attributes: X (b x c) matrix candidates' votes ballot box. W (b x g) matrix voters' groups ballot-box. real_prob (g x c) matrix probability voter group votes candidate. prob provided, equal probability. outcome (b x g x c) array number votes candidate ballot box, broken group.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/simulate_election.html","id":"shuffling-mechanism","dir":"Reference","previous_headings":"","what":"Shuffling Mechanism","title":"Simulate an Election — simulate_election","text":"Without loss generality, consider order relation groups ballot-boxes. shuffling step controlled lambda parameter operates follows: Initial Assignment: Voters assigned ballot-box sequentially according demographic group. specifically, first ballot-boxes receive voters first group. , next ballot-boxes receive voters second group. continues voters assigned. Note ballot-boxes contain voters single group (long number ballot-boxes exceeds number groups). Shuffling: fraction lambda voters already assigned selected random. , ballot-box assignment sample shuffled. Hence, different lambda values interpreted follows: lambda = 0 means one shuffled (initial assignment remains). lambda = 1 means individuals shuffled. Intermediate values like lambda = 0.5 shuffle half voters. Using high level lambda (greater 0.7) recommended, make identification voting probabilities difficult. higher values lambda induce similar ballot-boxes terms voters' group.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/simulate_election.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate an Election — simulate_election","text":"algorithm fully explained 'Thraves, C. Ubilla, P. Hermosilla, D.: \"Fast Ecological Inference Algorithm R×C Case\".","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/simulate_election.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate an Election — simulate_election","text":"","code":"# Example 1: Default usage with 200 ballot boxes, each having 100 voters result1 <- simulate_election(     num_ballots = 200,     num_candidates = 3,     num_groups = 5 )  # Example 2: Using a custom ballot_voters vector result2 <- simulate_election(     num_ballots = 340,     num_candidates = 3,     num_groups = 7,     ballot_voters = rep(200, 340) )  # Example 3: Supplying group_proportions result3 <- simulate_election(     num_ballots = 93,     num_candidates = 3,     num_groups = 4,     group_proportions = c(0.3, 0.5, 0.1, 0.1) )  # Example 4: Providing a user-defined prob matrix custom_prob <- matrix(c(     0.9,  0.1,     0.4,  0.6,     0.25, 0.75,     0.32, 0.68,     0.2,  0.8 ), nrow = 5, byrow = TRUE)  result4 <- simulate_election(     num_ballots = 200,     num_candidates = 2,     num_groups = 5,     lambda = 0.3,     prob = custom_prob )  result4$real_prob == custom_prob #>      [,1] [,2] #> [1,] TRUE TRUE #> [2,] TRUE TRUE #> [3,] TRUE TRUE #> [4,] TRUE TRUE #> [5,] TRUE TRUE # The attribute of the output real_prob matches the input custom_prob."},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/waldtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs a matrix-wise Wald test for two eim objects — waldtest","title":"Performs a matrix-wise Wald test for two eim objects — waldtest","text":"function compares two eim objects (sets matrices can converted objects) computing Wald test component estimated probability matrices. Wald test applied using bootstrap-derived standard deviations, result matrix p-values corresponding group-candidate combination.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/waldtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs a matrix-wise Wald test for two eim objects — waldtest","text":"","code":"waldtest(   object1 = NULL,   object2 = NULL,   X1 = NULL,   W1 = NULL,   X2 = NULL,   W2 = NULL,   nboot = 100,   seed = NULL,   alternative = \"two.sided\",   ... )"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/waldtest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs a matrix-wise Wald test for two eim objects — waldtest","text":"object1 eim object, returned eim. object2 second eim object compare object. X1 (b x c) matrix representing candidate votes per ballot box. W1 (b x g) matrix representing group votes per ballot box. X2 second (b x c) matrix compare X. W2 second (b x g) matrix compare W. nboot Integer specifying many times run EM algorithm per object. seed optional integer indicating random seed randomized algorithms. argument applicable initial_prob = \"random\" method either \"mcmc\" \"mvn_cdf\". Aditionally, sets random draws ballot boxes. alternative Character string specifying type alternative hypothesis test. Must one \"two.sided\" (default), \"greater\", \"less\". \"two.sided\", test checks difference estimated probabilities. \"greater\", tests whether first object systematically higher probabilities second. \"less\", tests whether first systematically lower probabilities. ... Additional arguments passed bootstrap run_em.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/waldtest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs a matrix-wise Wald test for two eim objects — waldtest","text":"list components: pvals: numeric matrix p-values dimensions estimated probability matrices (pvals) input objects. statistic: numeric matrix z-statistics dimensions estimated probability matrices (pvals). eim1 eim2: original eim objects used comparison. entry pvals matrix p-value Wald test corresponding entries two estimated probability matrices.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/waldtest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Performs a matrix-wise Wald test for two eim objects — waldtest","text":"uses Wald test analyze significant difference estimated probabilities treatment control set. test performed independently component probability matrix. user must provide either following (): Two eim objects via object1 object2, Four matrices: X1, W1, X2, W2, converted eim objects internally. Wald test computed using formula: $$ z_{ij} = \\frac{p_{1,ij}-p_{2,ij}}{\\sqrt{s_{1,ij}^2+s_{2,ij}^2}} $$ expression, \\(s_{1,ij}^2\\) \\(s_{2,ij}^2\\) represent bootstrap sample variances treatment control sets, respectively, \\(p_{1,ij}\\) \\(p_{2,ij}\\) corresponding estimated probability matrices obtained via EM algorithm.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/waldtest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs a matrix-wise Wald test for two eim objects — waldtest","text":"","code":"sim1 <- simulate_election(num_ballots = 100, num_candidates = 3, num_groups = 5, seed = 123) sim2 <- simulate_election(num_ballots = 100, num_candidates = 3, num_groups = 5, seed = 124)  result <- waldtest(sim1, sim2, nboot = 100)  # Check which entries are significantly different which(result$pvals < 0.05, arr.ind = TRUE) #>       row col #>  [1,]   1   1 #>  [2,]   2   1 #>  [3,]   3   1 #>  [4,]   4   1 #>  [5,]   5   1 #>  [6,]   1   2 #>  [7,]   2   2 #>  [8,]   3   2 #>  [9,]   4   2 #> [10,]   3   3 #> [11,]   4   3 #> [12,]   5   3"}]
