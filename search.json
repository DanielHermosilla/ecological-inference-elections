[{"path":"https://danielhermosilla.github.io/ecological-inference-elections/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Daniel Hermosilla Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/articles/demonstration.html","id":"data-loading","dir":"Articles","previous_headings":"","what":"Data loading","title":"Quick demo","text":"Let’s note package already includes dataset ’re interested , hence, ’ll neccesary load . Within essence working elections data, ’s important reduce observations within electoral districts. Hence, ’ll define function filter ELECTORAL.DISTRICT return results eim object case, interest work electoral district “El Golf”. Also, allowing us use mismatches, create two eim objects.","code":"library(fastei)  df <- get(\"chile_election_2021\") head(df) ##   ELECTORAL.DISTRICT BALLOT.BOX C1 C2 C3 C4 C5 C6 C7 BLANK.VOTES NULL.VOTES ## 1  ANTOFAGASTA NORTE        126 12 22  3  4  1  5 71           0          0 ## 2  ANTOFAGASTA NORTE        127 11 25  4  4  0  6 70           1          0 ## 3  ANTOFAGASTA NORTE        128 16 23  3  3  1  5 70           1          2 ## 4  ANTOFAGASTA NORTE        129 10 22  4  4  0  2 75           0          2 ## 5  ANTOFAGASTA NORTE        130 16 23  4  3  1  3 76           0          1 ## 6  ANTOFAGASTA NORTE        131 22 25  3  4  3  2 62           0          3 ##   X18.19 X20.29 X30.39 X40.49 X50.59 X60.69 X70.79 X80. MISMATCH ## 1      1      7    103      3      0      3      1    0    FALSE ## 2      2     10     98      6      4      1      0    0     TRUE ## 3      3      5    111      2      2      0      1    0     TRUE ## 4      2      2    103      7      3      2      0    0     TRUE ## 5      4      9    112      1      2      0      0    0     TRUE ## 6      3      8    103      4      3      1      0    2     TRUE # function that filters a specific electoral district from the Chilean election dataset get_XW_Chile <- function(elect_district, merge_blank_null = TRUE, remove_mismatch = TRUE) {     #  read dataset     df <- get(\"chile_election_2021\")     # filter a specific electoral district     df_ed <- df[df$ELECTORAL.DISTRICT == elect_district, ]     # remove ballot boxes with mismatch of votes and voters     if (remove_mismatch) {         df_ed <- df_ed[df_ed$MISMATCH == FALSE, ]     }     # get columns of candidates' votes     X <- df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c(\"C1\", \"C2\", \"C3\", \"C4\", \"C5\", \"C6\", \"C7\", \"BLANK.VOTES\", \"NULL.VOTES\")]     # merge blank and null votes     if (merge_blank_null) {         X$C8 <- X$BLANK.VOTES + X$NULL.VOTES     }     X <- X[, c(\"C1\", \"C2\", \"C3\", \"C4\", \"C5\", \"C6\", \"C7\", \"C8\")]     # convert X to matrix     X <- as.matrix(X[, c(\"C1\", \"C2\", \"C3\", \"C4\", \"C5\", \"C6\", \"C7\", \"C8\")])      # get voters of ecah demographic group, and convert to matrix     W <- as.matrix(df_ed[df_ed$ELECTORAL.DISTRICT == elect_district, c(\"X18.19\", \"X20.29\", \"X30.39\", \"X40.49\", \"X50.59\", \"X60.69\", \"X70.79\", \"X80.\")])      obj <- eim(X = X, W = W)     return(obj) } obj <- get_XW_Chile(\"EL GOLF\") obj_m <- get_XW_Chile(\"EL GOLF\", remove_mismatch = FALSE)  sprintf(\"The amount of mismatches is %d\", nrow(obj_m$X) - nrow(obj$X)) ## [1] \"The amount of mismatches is 221\""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/articles/demonstration.html","id":"setting-the-algorithm","dir":"Articles","previous_headings":"","what":"Setting the algorithm","title":"Quick demo","text":"running directly algorithm things can done. First , like know ’s best group aggregation log-likelihood maximized. ’s usually reward aggregating groups within big districts.  However, ’s trade-log-likelihood standard deviation.  Formally , best interest find best fit creating macro-groups. ’ll use greedy approach get_agg_opt heuristic approach get_agg_proxy. Note group aggregation size, however, chosen different indices. surely know \\([5, 8]\\) optimal aggregation, however, \\([3, 4]\\) isn’t far said values.","code":"obj <- get_agg_opt(obj, sd_threshold = 0.01, seed = 42) obj2 <- get_agg_proxy(obj, sd_threshold = 0.01, feasible = FALSE, seed = 42)  obj$group_agg ## [1] 8 obj2$group_agg ## [1] 3 4 8"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Hermosilla. Maintainer.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thraves C, Ubilla P, Hermosilla D (2025). fastei : Methods ”Fast Alternative R x C Ecological Inference Problem”.. R package version 0.0.0.1.","code":"@Manual{,   title = {fastei : Methods for ''A Fast Alternative for the R x C Ecological Inference Problem''.},   author = {Charles Thraves and Pablo Ubilla and Daniel Hermosilla},   year = {2025},   note = {R package version 0.0.0.1}, }"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs a Bootstrap to Estimate the Standard Deviation of Predicted Probabilities — bootstrap","title":"Runs a Bootstrap to Estimate the Standard Deviation of Predicted Probabilities — bootstrap","text":"function computes Expected-Maximization (EM) algorithm \"nboot\" times. computes standard deviation nboot estimated probability matrices component.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs a Bootstrap to Estimate the Standard Deviation of Predicted Probabilities — bootstrap","text":"","code":"bootstrap(  object = NULL,  X = NULL,  W = NULL,  json_path = NULL,  nboot = 50,  seed = NULL  ... )"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs a Bootstrap to Estimate the Standard Deviation of Predicted Probabilities — bootstrap","text":"object object class eim, can created using eim function. parameter used either () X W matrices (ii) json_path supplied. See Note. X (b x c) matrix representing candidate votes per ballot box. W (b x g) matrix representing group votes per ballot box. json_path path JSON file containing X W fields, stored nested arrays. may contain additional fields attributes, added returned object. nboot Integer specifying many times run EM algorithm. seed optional integer indicating random seed randomized algorithms. argument applicable initial_prob = random method either mcmc mvn_cdf. ... Additional arguments passed run_em function execute EM algorithm.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/bootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs a Bootstrap to Estimate the Standard Deviation of Predicted Probabilities — bootstrap","text":"Returns eim object sd field containing estimated standard deviations probabilities amount iterations made. eim object provided, attributes (see run_em) retained returned object.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/bootstrap.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Runs a Bootstrap to Estimate the Standard Deviation of Predicted Probabilities — bootstrap","text":"function can executed using one three mutually exclusive approaches: providing existing eim object. supplying input matrices (X W) directly. specifying JSON file (json_path) containing matrices. input methods mutually exclusive, meaning must provide exactly one options. Attempting provide one none inputs result error. called eim object, function updates object computed results. eim object provided, function create one internally using either supplied matrices data JSON file executing algorithm.","code":""},{"path":[]},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Runs a Bootstrap to Estimate the Standard Deviation of Predicted Probabilities — bootstrap","text":"","code":"# Example 1: Using an 'eim' object directly simulations <- simulate_election(     num_ballots = 200,     num_candidates = 5,     num_groups = 3, )  model <- eim(X = simulations$X, W = simulations$W)  model <- bootstrap(     object = model,     nboot = 30,     method = \"mvn_cdf\",     maxiter = 500,     verbose = FALSE,     mc_samples = 5000 )  # Access standard deviation throughout 'model' print(model$sd) #>            [,1]       [,2]       [,3]       [,4]       [,5] #> [1,] 0.00249249 0.00461153 0.00565743 0.00738273 0.00320549 #> [2,] 0.00287011 0.00245456 0.00825211 0.00996960 0.00348694 #> [3,] 0.00225682 0.00238425 0.00670879 0.00605480 0.00294084   # Example 2: Providing 'X' and 'W' matrices directly model <- bootstrap(     X = simulations$X,     W = simulations$W,     nboot = 70,     method = \"mvn_pdf\",     maxiter = 100,     maxtime = 15,     param_threshold = 0.01 )  print(model$sd) #>            [,1]       [,2]       [,3]       [,4]       [,5] #> [1,] 0.00258675 0.00594000 0.00863802 0.00484536 0.00723129 #> [2,] 0.00516180 0.00361544 0.00492120 0.00829451 0.00663616 #> [3,] 0.00498594 0.00322182 0.00972800 0.00640655 0.00915967  # Example 3: Using a JSON file as input if (FALSE) { # \\dontrun{ model <- bootstrap(     json_path = \"path/to/election_data.json\",     nboot = 70,     method = \"mult\", )  print(model$sd) } # }"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/chile_election_2021.html","id":null,"dir":"Reference","previous_headings":"","what":"Chilean 2021 First Round Presidential Election — chile_election_2021","title":"Chilean 2021 First Round Presidential Election — chile_election_2021","text":"dataset contains results first round 2021 Chilean presidential elections. provides 9 possible voting options (7 candidates, blank, null). ballot-box identified id (BALLOT.BOX) electoral circumscription (ELECTORAL.DISTRICT). Additionally, provides demographic information voters' age range ballot box.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/chile_election_2021.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chilean 2021 First Round Presidential Election — chile_election_2021","text":"","code":"data(\"chile_election_2021\")"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/chile_election_2021.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Chilean 2021 First Round Presidential Election — chile_election_2021","text":"data frame 46,639 rows 14 variables: ELECTORAL.DISTRICT electoral circumscription ballot box. BALLOT.BOX identifier ballot box within ELECTORAL.DISTRICT. C1 number votes cast candidate Gabriel Boric. C2 number votes cast candidate José Antonio Kast. C3 number votes cast candidate Yasna Provoste. C4 number votes cast candidate Sebastián Sichel. C5 number votes cast candidate Eduardo Artés. C6 number votes cast candidate Marco Enríquez-Ominami. C7 number votes cast candidate Franco Parisi. BLANK.VOTES number blank votes. NULL.VOTES number null votes. X18.19 Number voters aged 18–19. X20.29 Number voters aged 20–29. X30.39 Number voters aged 30–39. X40.49 Number voters aged 40–49. X50.59 Number voters aged 50–59. X60.69 Number voters aged 60–69. X70.79 Number voters aged 70–79. X80. Number voters aged 80 older. MISMATCH Boolean takes value TRUE ballot-box mismatch total number votes total number voters. case, value FALSE.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/chile_election_2021.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Chilean 2021 First Round Presidential Election — chile_election_2021","text":"Chilean Electoral Service (SERVEL)","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/chile_election_2021.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chilean 2021 First Round Presidential Election — chile_election_2021","text":"","code":"data(\"chile_election_2021\") head(chile_election_2021) #>   ELECTORAL.DISTRICT BALLOT.BOX C1 C2 C3 C4 C5 C6 C7 BLANK.VOTES NULL.VOTES #> 1  ANTOFAGASTA NORTE        126 12 22  3  4  1  5 71           0          0 #> 2  ANTOFAGASTA NORTE        127 11 25  4  4  0  6 70           1          0 #> 3  ANTOFAGASTA NORTE        128 16 23  3  3  1  5 70           1          2 #> 4  ANTOFAGASTA NORTE        129 10 22  4  4  0  2 75           0          2 #> 5  ANTOFAGASTA NORTE        130 16 23  4  3  1  3 76           0          1 #> 6  ANTOFAGASTA NORTE        131 22 25  3  4  3  2 62           0          3 #>   X18.19 X20.29 X30.39 X40.49 X50.59 X60.69 X70.79 X80. MISMATCH #> 1      1      7    103      3      0      3      1    0    FALSE #> 2      2     10     98      6      4      1      0    0     TRUE #> 3      3      5    111      2      2      0      1    0     TRUE #> 4      2      2    103      7      3      2      0    0     TRUE #> 5      4      9    112      1      2      0      0    0     TRUE #> 6      3      8    103      4      3      1      0    2     TRUE"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/eim.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 Object for the Expectation-Maximization Algorithm — eim","title":"S3 Object for the Expectation-Maximization Algorithm — eim","text":"constructor creates eim S3 object, either using matrices X W directly reading JSON file. eim object encapsulates data (votes candidates demographic groups) required underlying Expectation-Maximization algorithm.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/eim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 Object for the Expectation-Maximization Algorithm — eim","text":"","code":"eim(X = NULL, W = NULL, json_path = NULL)"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/eim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 Object for the Expectation-Maximization Algorithm — eim","text":"X (b x c) matrix representing candidate votes per ballot box. W (b x g) matrix representing group votes per ballot box. json_path path JSON file containing X W fields, stored nested arrays. may contain additional fields attributes, added returned object.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/eim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 Object for the Expectation-Maximization Algorithm — eim","text":"list class eim containing: X candidate votes matrix (b x c). W group votes matrix (b x g).","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/eim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"S3 Object for the Expectation-Maximization Algorithm — eim","text":"X W directly supplied, must match dimensions ballot boxes (b). Alternatively, json_path provided, function expects JSON file contain elements named \"X\" \"W\" top-level object. two approaches mutually exclusable, yielding error otherwise. Internally, function also initializes corresponding instance within low-level (C-based) API, ensuring data correctly registered processing EM algorithm.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/eim.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"S3 Object for the Expectation-Maximization Algorithm — eim","text":"way generate synthetic data X W using simulate_election function. See Example 2 .","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/eim.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"S3 Object for the Expectation-Maximization Algorithm — eim","text":"addition constructor, \"eim\" class provides several S3 methods common operations. methods fully documented, others ommited due straightfoward implementantion. available methods : run_em – Runs EM algorithm. bootstrap – Estimates standard deviation probabilities. save – Save results specified file. get_agg_proxy – Estimates ideal group aggregation given standard deviations. get_agg_opt – Estimates ideal group aggregation among combinations, given log-likelihood. print – Print useful information object. summary – Shows, form list, important attributes. .matrix – Returns probability matrix. write.csv – Writes probability matrix .csv file. dput – Writes object .rda file. logLik – Returns log-likelihood last iteration.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/eim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 Object for the Expectation-Maximization Algorithm — eim","text":"","code":"# Example 1: Create an eim object from a JSON file if (FALSE) { # \\dontrun{ model1 <- eim(json_path = \"path/to/file.json\") } # }  # Example 2: Use simulate_election with optional parameters, then create an eim object # from matrices  # Simulate data for 500 ballot boxes, 4 candidates and 5 groups sim_result <- simulate_election(     num_ballots = 500,     num_candidates = 3,     num_groups = 5,     group_proportions = c(0.2, 0.2, 0.4, 0.1, 0.1) )  model2 <- eim(X = sim_result$X, W = sim_result$W)  # Example 3: Create an object from a user defined matrix with 8 ballot boxes, # 2 candidates and 7 groups.  x_mat <- matrix(c(     57, 90,     60, 84,     43, 102,     72, 71,     63, 94,     52, 80,     60, 72,     54, 77 ), nrow = 8, ncol = 2, byrow = TRUE)  w_mat <- matrix(c(     10, 15, 25, 21, 10, 40, 26,     11, 21, 37, 32, 8, 23, 12,     17, 12, 43, 27, 12, 19, 15,     20, 18, 25, 15, 22, 17, 26,     21, 19, 27, 16, 23, 22, 29,     18, 16, 20, 14, 19, 22, 23,     10, 15, 21, 18, 20, 16, 32,     12, 17, 19, 22, 15, 18, 28 ), nrow = 8, ncol = 7, byrow = TRUE)  model3 <- eim(X = x_mat, W = w_mat)"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/fastei-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fastei: Methods for ","title":"fastei: Methods for ","text":"Package implements methods Thraves, C. Ubilla, P. (2024): \"Fast Ecological Inference Algorithm R×C Case\".","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/fastei-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"fastei: Methods for ","text":"Includes method (run_em) solve R\\(\\times\\)C Ecological Inference problem non-parametric case using EM algorithm different approximation methods E-Step. standard deviation estimated probabilities can computed using bootstrapping (bootstrap). also provides function generates synthetic election data (simulate_election) function imports real election data (chilean_election_2021) Chilean first-round presidential election 2021. setting documentation presents Ecological Inference problem election context set ballot-boxes observe () votes obtained candidate (ii) number voters demographic group (example, can defined age ranges sex). See Thraves, C. Ubilla, P. (2024): \"Fast Ecological Inference Algorithm R×C Case\". methods compute conditional probabilities E-Step included package following: Markov Chain Monte Carlo (mcmc): Performs MCMC sample vote outcomes ballot-box consistent observed data. sample used estimate conditional probability E-Step. Multivariate Normal PDF (mvn_pdf): Uses PDF Multivariate Normal approximate conditional probability. Multivariate Normal CDF (mvn_cdf): Uses CDF Multivariate Normal approximate conditional probability. Multinomial (mult): single Multinomial used approximate sum Multinomial distributions. Exact (exact): Solves E-Step exactly using Total Probability Law, requires enumerating exponential number terms. average, Multinomial method efficient precise. precision matches Exact method. documentation uses following notation: b: number ballot-boxes. g: number demographic groups. c: number candidates. : number aggregated macro-groups. learn fastei, please consult available vignettes:","code":"browseVignettes(\"fastei\")"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/fastei-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"fastei: Methods for ","text":"Thraves, C. Ubilla, P. (2024): \"Fast Ecological Inference Algorithm R×C Case\".","code":""},{"path":[]},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs the EM algorithm over all possible group aggregating, returning the one with higher likelihood while constraining the standard deviation of the probabilities. — get_agg_opt","title":"Runs the EM algorithm over all possible group aggregating, returning the one with higher likelihood while constraining the standard deviation of the probabilities. — get_agg_opt","text":"function estimates voting probabilities (computed using run_em) trying group aggregations (adjacent groups), choosing one achieves higher likelihood long standard deviation (computed using bootstrap) estimated probabilities given threshold.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs the EM algorithm over all possible group aggregating, returning the one with higher likelihood while constraining the standard deviation of the probabilities. — get_agg_opt","text":"","code":"get_agg_opt(   object = NULL,   X = NULL,   W = NULL,   json_path = NULL,   sd_statistic = \"maximum\",   sd_threshold = 0.05,   nboot = 50,   seed = NULL,   ... )"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_opt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs the EM algorithm over all possible group aggregating, returning the one with higher likelihood while constraining the standard deviation of the probabilities. — get_agg_opt","text":"object object class eim, can created using eim function. parameter used either () X W matrices (ii) json_path supplied. See Note run_em. X (b x c) matrix representing candidate votes per ballot box. W (b x g) matrix representing group votes per ballot box. json_path path JSON file containing X W fields, stored nested arrays. may contain additional fields attributes, added returned object. sd_statistic String indicates statistic standard deviation (g x c) matrix stopping condition, .e., algorithm stops statistic threshold. can take value maximum, case computes maximum standard deviation matrix, average, case computes average. sd_threshold Numeric value use threshold statistic (sc_statistic) standard deviation estimated probabilities. Defaults 0.05. nboot Integer specifying many times run EM algorithm. seed optional integer indicating random seed randomized algorithms. argument applicable initial_prob = random method either mcmc mvn_cdf. ... Additional arguments passed run_em function execute EM algorithm.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_opt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs the EM algorithm over all possible group aggregating, returning the one with higher likelihood while constraining the standard deviation of the probabilities. — get_agg_opt","text":"returns eim object attributes output run_em, plus attributes: sd: (x c) matrix standard deviation estimated probabilities computed bootstrapping. Note denotes number macro-groups resulting group aggregation, 1 g. nboot: Number samples used bootstrap method. seed: Random seed used (specified). sd_statistic: statistic used input. sd_threshold: threshold used input. group_agg: Vector resulting group aggregation. See Examples details. Aditionally, create W_agg attribute aggregated groups.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_opt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Runs the EM algorithm over all possible group aggregating, returning the one with higher likelihood while constraining the standard deviation of the probabilities. — get_agg_opt","text":"Groups consecutive row indices matrix W considered adjacent. example, consider following seven groups defined voters' age ranges: 20-29, 30-39, 40-49, 50-59, 60-69, 70-79, 80+. possible group aggregation can macro-group composed three following age ranges: 20-39, 40-59, 60+. Since multiple group aggregations, method evaluates possible group aggregations (merging adjacent groups).","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_opt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Runs the EM algorithm over all possible group aggregating, returning the one with higher likelihood while constraining the standard deviation of the probabilities. — get_agg_opt","text":"","code":"# Example 1: Using a simulated instance simulations <- simulate_election(     num_ballots = 100,     num_candidates = 3,     num_groups = 8,     seed = 42 )  result <- get_agg_opt(     X = simulations$X,     W = simulations$W,     sd_threshold = 0.05 )  result$group_agg # c(3,8) #> [1] 8 # This would mean that the ideal group aggregation would # be {[1, 2, 3], [4, 5, 6, 7, 8]}  if (FALSE) { # \\dontrun{ # Example 2: Getting an unfeasible result result2 <- get_agg_opt(     X = simulations$X,     W = simulations$W,     sd_threshold = 0.001 )  result2$group_agg # Error result2$X # Input candidates' vote matrix result2$W # Input group-level voter matrix } # }"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_proxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs the EM algorithm aggregating adjacent groups, maximizing the variability of macro-group allocation in ballot boxes. — get_agg_proxy","title":"Runs the EM algorithm aggregating adjacent groups, maximizing the variability of macro-group allocation in ballot boxes. — get_agg_proxy","text":"function estimates voting probabilities (computed using run_em) aggregating adjacent groups estimated probabilities' standard deviation (computed using bootstrap) given threshold. See Details information.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_proxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs the EM algorithm aggregating adjacent groups, maximizing the variability of macro-group allocation in ballot boxes. — get_agg_proxy","text":"","code":"get_agg_proxy(   object = NULL,   X = NULL,   W = NULL,   json_path = NULL,   sd_statistic = \"maximum\",   sd_threshold = 0.05,   feasible = TRUE,   nboot = 50,   seed = NULL,   ... )"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_proxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs the EM algorithm aggregating adjacent groups, maximizing the variability of macro-group allocation in ballot boxes. — get_agg_proxy","text":"object object class eim, can created using eim function. parameter used either () X W matrices (ii) json_path supplied. See Note run_em. X (b x c) matrix representing candidate votes per ballot box. W (b x g) matrix representing group votes per ballot box. json_path path JSON file containing X W fields, stored nested arrays. may contain additional fields attributes, added returned object. sd_statistic String indicates statistic standard deviation (g x c) matrix stopping condition, .e., algorithm stops statistic threshold. can take value maximum, case computes maximum standard deviation matrix, average, case computes average. sd_threshold Numeric value use threshold statistic (sc_statistic) standard deviation estimated probabilities. Defaults 0.05. feasible Logical indicating whether returned matrix must strictly satisfy sd_threshold. TRUE, output returned method find group aggregation whose standard deviation statistic threshold. FALSE latter holds, returns group aggregation obtained DP withe lowest standard deviation statistic. See Details information. nboot Integer specifying many times run EM algorithm. seed optional integer indicating random seed randomized algorithms. argument applicable initial_prob = random method either mcmc mvn_cdf. ... Additional arguments passed run_em function execute EM algorithm.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_proxy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs the EM algorithm aggregating adjacent groups, maximizing the variability of macro-group allocation in ballot boxes. — get_agg_proxy","text":"returns eim object attributes output run_em, plus attributes: sd: (x c) matrix standard deviation estimated probabilities computed bootstrapping. Note denotes number macro-groups resulting group aggregation, 1 g. nboot: Number samples used bootstrap method. seed: Random seed used (specified). sd_statistic: statistic used input. sd_threshold: threshold used input. is_feasible:  Boolean indicating whether statistic standard deviation matrix threshold. group_agg: Vector resulting group aggregation. See Examples details. Aditionally, create W_agg attribute aggregated groups.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_proxy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Runs the EM algorithm aggregating adjacent groups, maximizing the variability of macro-group allocation in ballot boxes. — get_agg_proxy","text":"Groups need order relation adjacent groups can merged. example, consider following seven groups defined voters' age ranges: 20-29, 30-39, 40-49, 50-59, 60-69, 70-79, 80+. possible group aggregation can macro-group composed three following age ranges: 20-39, 40-59, 60+. Since multiple group aggregations, even fixed number macro-groups, Dynamic Program (DP) mechanism used find group aggregation maximizes sum standard deviation macro-groups proportions among ballot boxes specific number macro-groups. group aggregation standard deviation statistic meets threshold condition, NULL returned. find best group aggregation, function runs DP iteratively, starting groups (case trivial since group aggregation macro-groups match exactly original groups). standard deviation statistic (sd_statistic) threshold (sd_threshold), stops. Otherwise, runs DP number macro-groups one unit less original number macro-groups. standard deviation statistic threshold, stops. continues either algorithm stops, group aggregation obtained DP satisfies threshold condition. former holds, last group aggregation obtained (stopping) returned; latter holds, output returned unless user sets input parameter feasible=FALSE, case returns group aggregation least standard deviation statistic, among group-aggregations obtained DP.","code":""},{"path":[]},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/get_agg_proxy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Runs the EM algorithm aggregating adjacent groups, maximizing the variability of macro-group allocation in ballot boxes. — get_agg_proxy","text":"","code":"# Example 1: Using a simulated instance simulations <- simulate_election(     num_ballots = 400,     num_candidates = 3,     num_groups = 6,     group_proportions = c(0.4, 0.1, 0.1, 0.1, 0.2, 0.1),     lambda = 0.7,     seed = 42 )  result <- get_agg_proxy(     X = simulations$X,     W = simulations$W,     sd_threshold = 0.015,     seed = 42 )  result$group_agg # c(2 6) #> [1] 2 6 # This means that the resulting group aggregation is conformed by # two macro-groups: one that has the original groups 1 and 2; and # a second that has the original groups 3, 4, 5, and 6: # {[1, 2], [3, 6]}  # Example 2: Using the chilean election results data(chile_election_2021)  niebla_df <- chile_election_2021[chile_election_2021$ELECTORAL.DISTRICT == \"NIEBLA\", ]  # Create the X matrix with selected columns X <- as.matrix(niebla_df[, c(\"C1\", \"C2\", \"C3\", \"C4\", \"C5\", \"C6\", \"C7\")])  # Create the W matrix with selected columns W <- as.matrix(niebla_df[, c(     \"X18.19\", \"X20.29\",     \"X30.39\", \"X40.49\",     \"X50.59\", \"X60.69\",     \"X70.79\", \"X80.\" )])  solution <- get_agg_proxy(     X = X, W = W,     allow_mismatch = TRUE, sd_threshold = 0.03,     sd_statistic = \"average\", nboot = 100, seed = 42 )  solution$group_agg # c(3, 4, 5, 6, 8) #> [1] 3 4 5 6 8 # This means that the resulting group aggregation consists of # five macro-groups: one that includes the original groups 1, 2, and 3; # three singleton groups (4, 5, and 6); and one macro-group that includes groups 7 and 8. # {[1, 2, 3], [4], [5], [6], [7, 8]}"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/run_em.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Expected-Maximization Algorithm — run_em","title":"Compute the Expected-Maximization Algorithm — run_em","text":"Executes Expectation-Maximization (EM) algorithm indicating approximation method use E-step. Certain methods may require additional arguments, can passed ... (see fastei-package details).","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/run_em.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Expected-Maximization Algorithm — run_em","text":"","code":"run_em(   object = NULL,  json_path = NULL,  method = \"mult\",  initial_prob = \"group_proportional\",  allow_mismatch = FALSE,  maxiter = 1000,  maxtime = 3600,  param_threshold = 0.001,  ll_threshold = as.double(-Inf),  verbose = FALSE,  ... )"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/run_em.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Expected-Maximization Algorithm — run_em","text":"object object class eim, can created using eim function. parameter used either () X W matrices (ii) json_path supplied. See Note. X (b x c) matrix representing candidate votes per ballot box. W (b x g) matrix representing group votes per ballot box. json_path path JSON file containing X W fields, stored nested arrays. may contain additional fields attributes, added returned object. method optional string specifying method used estimating E-step. Valid options : mult: default method, using single sum Multinomial distributions. mvn_cdf: Uses Multivariate Normal CDF distribution approximate conditional probability. mvn_pdf: Uses Multivariate Normal PDF distribution approximate conditional probability. mcmc: Uses MCMC sample vote outcomes. used estimate conditional probability E-step. exact: Solves E-step using Total Probability Law. detailed description method, see fastei-package References. initial_prob optional string specifying method used obtain initial probability. Accepted values : uniform: Assigns equal probability every candidate within group. proportional: Assigns probabilities group based proportion candidates votes. group_proportional: Computes probability matrix taking account group candidate proportions. default method. random: Use randomized values fill probability matrix. allow_mismatch Boolean, TRUE, allows mismatch voters votes ballot-box, works method mvn_cdf, mvn_pdf, mult mcmc. FALSE, throws error mismatch. default FALSE. maxiter optional integer indicating maximum number EM iterations. default value 1000. maxtime optional numeric specifying maximum running time (seconds) algorithm. checked every iteration EM algorithm. default value 3600, corresponds hour. param_threshold optional numeric value indicating minimum difference consecutive probability values required stop iterating. default value 0.001. Note algorithm stop either ll_threshold param_threshold accomplished. ll_threshold optional numeric value indicating minimum difference consecutive log-likelihood values stop iterating. default value inf, essentially deactivating threshold. Note algorithm stop either ll_threshold param_threshold accomplished. verbose optional boolean indicating whether print informational messages EM iterations. default value FALSE. step_size optional integer specifying step size mcmc algorithm. parameter applicable method = mcmc ignored otherwise. default value 3000. samples optional integer indicating number samples generate MCMC method. parameter relevant method = mcmc. default value 1000. mc_method optional string specifying method used estimate mvn_cdf method via Monte Carlo simulation. Accepted values genz genz2, genz2 set default. parameter applicable method = mvn_cdf. See References details. mc_error optional numeric value defining error threshold Monte Carlo simulation estimating mvn_cdf method. default value 1e-6. parameter relevant method = mvn_cdf. mc_samples optional integer specifying number Monte Carlo samples mvn_cdf method. default value 5000. argument applicable method = mvn_cdf. seed optional integer indicating random seed randomized algorithms. argument applicable initial_prob = random method either mcmc mvn_cdf.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/run_em.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Expected-Maximization Algorithm — run_em","text":"function returns eim object function arguments following attributes: prob estimated probability matrix (g x c). cond_prob (b x g x c) 3d-array probability ballot-box voter group voted candidate, given observed outcome particular ballot-box. logLik log-likelihood value last iteration. iterations total number iterations performed EM algorithm. time total execution time algorithm seconds. status final status ID algorithm upon completion: 0: Convergenced. 1: Maximum time reached. 2: Maximum iterations reached. message finishing status displayed message. method method estimating conditional probability E-step. Aditionally, create samples step_size parameters specified method mcmc, mc_method, mc_error mc_samples method mvn_cdf.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/run_em.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute the Expected-Maximization Algorithm — run_em","text":"function can executed using one three mutually exclusive approaches: providing existing eim object. supplying input matrices (X W) directly. specifying JSON file (json_path) containing matrices. input methods mutually exclusive, meaning must provide exactly one options. Attempting provide one none inputs result error. called eim object, function updates object computed results. eim object provided, function create one internally using either supplied matrices data JSON file executing algorithm.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/run_em.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the Expected-Maximization Algorithm — run_em","text":"Thraves, C. Ubilla, P.: \"Fast Ecological Inference Algorithm R×C Case\". Aditionally, MVN CDF computed methods introduced Genz, . (2000). Numerical computation multivariate normal probabilities. Journal Computational Graphical Statistics","code":""},{"path":[]},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/run_em.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Expected-Maximization Algorithm — run_em","text":"","code":"# Example 1: Compute the Expected-Maximization with default settings simulations <- simulate_election(     num_ballots = 300,     num_candidates = 5,     num_groups = 3, ) model <- eim(simulations$X, simulations$W) model <- run_em(model) # Returns the object with updated attributes  # Example 2: Compute the Expected-Maximization using the MCMC method model <- run_em(     object = model,     method = \"mcmc\",     step_size = 1500,     samples = 800 )  # Example 3: Run the MVN CDF method with default settings model <- run_em(object = model, method = \"mvn_cdf\")  # Example 4: Perform an Exact estimation using user-defined parameters if (FALSE) { # \\dontrun{ run_em(     json_path = \"a/json/file.json\",     method = \"exact\",     initial_prob = \"uniform\",     maxiter = 10,     maxtime = 600,     param_threshold = 1e-3,     ll_threshold = 1e-5,     verbose = TRUE ) } # }"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/save_eim.html","id":null,"dir":"Reference","previous_headings":"","what":"Save an eim object to a file — save_eim","title":"Save an eim object to a file — save_eim","text":"function saves eim object specified file format. Supported formats RDS, JSON, CSV. function dynamically extracts saves available attributes exporting JSON. prob field exists, saved using CSV; otherwise, yields error.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/save_eim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save an eim object to a file — save_eim","text":"","code":"save_eim(object, filename, ...)"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/save_eim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save an eim object to a file — save_eim","text":"object eim object. filename character string specifying file path, including desired file extension (.rds, .json, .csv). ... Additional arguments (currently unused included compatibility).","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/save_eim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save an eim object to a file — save_eim","text":"function return anything explicitly saves object specified file.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/save_eim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save an eim object to a file — save_eim","text":"file extension RDS, entire object saved using saveRDS(). file extension JSON, available attributes object stored JSON format. file extension CSV: object contains prob field, field saved CSV. Otherwise, returns error.","code":""},{"path":[]},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/save_eim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save an eim object to a file — save_eim","text":"","code":"model <- eim(X = matrix(1:9, 3, 3), W = matrix(1:9, 3, 3))  run_em(model)  # Save as RDS save_eim(model, \"model_results.rds\") #> Results saved as RDS: model_results.rds  # Save as JSON save_eim(model, \"model_results.json\") #> Results saved as JSON: model_results.json  # Save as CSV save_eim(model, \"model_results.csv\") #> Error in save_eim(model, \"model_results.csv\"): The `run_em()` method must be called for saving a '.csv' file."},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/simulate_election.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate an Election — simulate_election","title":"Simulate an Election — simulate_election","text":"function simulates election creating matrices representing candidate votes (X) voters' demographic group (W) across specified number ballot-boxes. either () receives input (ii) generates probability matrix (prob), indicating likely demographic group vote candidate. default, number voters per ballot box '(ballot_voters)' set vector 100 length 'num_ballots'. can optionally override providing custom vector. Optional parameters available control distribution votes: group_proportions: vector length num_groups specifying overall proportion demographic group. Entries must sum one non-negative. prob: user-supplied probability matrix dimension (num_groups \\(\\times\\) num_candidates). provided, matrix used directly. Otherwise, voting probabilities group drawn Dirichlet distribution.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/simulate_election.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate an Election — simulate_election","text":"","code":"simulate_election(   num_ballots,   num_candidates,   num_groups,   ballot_voters = rep(100, num_ballots),   lambda = 0.5,   seed = NULL,   group_proportions = rep(1/num_groups, num_groups),   prob = NULL )"},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/simulate_election.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate an Election — simulate_election","text":"num_ballots Number ballot boxes (b). num_candidates Number candidates (c). num_groups Number demographic groups (g). ballot_voters vector length num_ballots representing number voters per ballot box. Defaults rep(100, num_ballots). lambda numeric value 0 1 represents fraction voters randomly assigned ballot-boxes. remaining voters assigned sequentially according demographic group. lambda = 0: assignment voters ballot-boxes fully sequential terms demographic group. leads high heterogeneity voters' groups across ballot-boxes. lambda = 1: assignment voters ballot-boxes fully random. leads low heterogeneity voters' group across ballot-boxes. Default value set 0.5. See Shuffling Mechanish details. seed provided, overrides current global seed. Defaults NULL. group_proportions Optional. vector length num_groups indicates fraction voters belong group. Default groups size. prob Optional. user-supplied probability matrix dimension (g x c). provided, matrix used underlying voting probability distribution. supplied, row sampled Dirichlet distribution parameter set one.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/simulate_election.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate an Election — simulate_election","text":"list three components: X (b x c) matrix candidates' votes ballot box. W (b x g) matrix voters' groups ballot-box. real_prob (g x c) matrix probability voter group votes candidate. prob provided, equal probability.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/simulate_election.html","id":"shuffling-mechanism","dir":"Reference","previous_headings":"","what":"Shuffling Mechanism","title":"Simulate an Election — simulate_election","text":"Without loss generality, consider order relation groups ballot-boxes. shuffling step controlled lambda parameter operates follows: Initial Assignment: Voters assigned ballot-box sequentially according demographic group. specifically, first ballot-boxes receive voters first group. , next ballot-boxes receive voters second group. continues voters assigned. Note ballot-boxes contain voters single group (long number ballot-boxes exceeds number groups). Shuffling: fraction lambda voters already assigned selected random. , ballot-box assignment sample shuffled. Hence, different lambda values interpreted follows: lambda = 0 means one shuffled (initial assignment remains). lambda = 1 means individuals shuffled. Intermediate values like lambda = 0.5 shuffle half voters. Using high level lambda (greater 0.6) recommended, make identification voting probabilities difficult. higher values lambda induce similar ballot-boxes terms voters' group.","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/simulate_election.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate an Election — simulate_election","text":"algorithm fully explained 'Thraves, C. Ubilla, P.: \"Fast Ecological Inference Algorithm R×C Case\".","code":""},{"path":"https://danielhermosilla.github.io/ecological-inference-elections/reference/simulate_election.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate an Election — simulate_election","text":"","code":"# Example 1: Default usage with 200 ballot boxes, each having 100 voters result1 <- simulate_election(     num_ballots = 200,     num_candidates = 3,     num_groups = 5 )  # Example 2: Using a custom ballot_voters vector result2 <- simulate_election(     num_ballots = 340,     num_candidates = 3,     num_groups = 7,     ballot_voters = rep(200, 340) )  # Example 3: Supplying group_proportions result3 <- simulate_election(     num_ballots = 93,     num_candidates = 3,     num_groups = 4,     group_proportions = c(0.3, 0.5, 0.1, 0.1) )  # Example 4: Providing a user-defined prob matrix custom_prob <- matrix(c(     0.9,  0.1,     0.4,  0.6,     0.25, 0.75,     0.32, 0.68,     0.2,  0.8 ), nrow = 5, byrow = TRUE)  result4 <- simulate_election(     num_ballots = 200,     num_candidates = 2,     num_groups = 5,     lambda = 0.3,     prob = custom_prob )  result4$prob == custom_prob # TRUE #> logical(0)"}]
